[{:quotes ["좋은 프로그래머란, 일방통행 도로에서도 양쪽을 모두 보고 건너는 사람이다. -더그 린더"
           "Talk is cheap. Show me the code - Linus Torvalds"
           "To iterate is human, to recurse divine. (인간적인 반복, 성스러운 재귀) - L. 피터 도이치"
           "If content is king, then context is God - Gary Vaynerchuck"
           "Great things are done by a series of small things brought together - Vincent Van Gogh"
           "우리가 원하는 것은 용병팀이 아닌 미션팀이다. 용병팀은 지시한 것만을 만든다. 미션팀은 진심으로 비전을 믿고 그들의 고객 문제 해결을 위해 최선을 다한다 - 존 도어(John Doerr)"
           "You wanted a banana but what you got was a gorilla holding the banana and the entire jungle. - Joe Armstrong, creator of Erlang"
           "'비동기성'에 대해 모두가 합의하는 정의는 아직 없지만, 여기서는 '게임 상태는 공유하되 플레이어가 동시에 참여하지 않는 멀티플레이어 게임'을 지칭한다. {[가마수트라] 비동기성 추가하기}"
           "팀워크는 평범한 사람이 비범한 결과를 내게 하는 연료다. - 앤드류 카네기"
           "이해력은 다른 여러 수준의 경험이 상호 연관될 때 더 높아질 수 있다. 무엇도 당연히 여기지 않는 신참과, 다 안다고 생각하는 고참이 더 자주 소통할 때 해당된다. -칼 와익,칼린 로버츠,'Collective Mind in Organizations'"
           "프로그래밍은 프로그램을 짜면서 배우는 것이다. - 브라이언 커니핸(Brian Kernighan)"
           "천재와 멍청이의 차이는 천재에겐 한계가 있다는 것이다. - 아인슈타인"
           "소프트웨어 설계에는 두 개의 방법이 있다. 하나는 결함이 있을 수 없을 정도로 단순하게 만드는 방법이다. 다른 하나는, 분명한 결함을 눈치채기 어려울 정도로 복잡하게 만드는 방법이다. -Tony Hoare"
           "프로그래밍은 골프와 비슷하다. 점수는 공을 집어넣는게 아니라, 공을 집어넣기까지 몇 번을 쳤느냐에 결정된다는 점에서. -할란 밀스"
           "코드를 재사용하는 일이란 다른 사람의 글에서 문장을 뽑아 잡지 기사를 만드는 것과 같다. -밥 프랭크스톤"
           "나는 아름다운 조개와 매끄러운 조약돌을 찾으며 해변을 즐겁게 거니는 소년과 같았다. 내 눈앞에는 미지의 진리가 가득한 바다가 펼쳐져 있었다. -Isaac Newton"
           "디버깅을 할 때, 초보는 올바른 코드를 더한다. 전문가는 필요없는 코드를 지운다. -리차드 패티스"
           "모든 소프트웨어 개발자의 95퍼센트는 자기가 5퍼센트 안에 드는 지식과 능력을 갖고 있다고 생각하죠. -리누스 토발즈"
           "배열은 0에서 시작해야 하나, 1에서 시작해야 하나? 천천히 생각해본 끝에 나는 0.5라는 절충안이 별로라는걸 알게 되었다. -스탠 켈리-부틀"
           "하드웨어: 문제가 생겼을 때 발로 찰 수 있는 부분 -제프 페시스"
           "It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures. - Alan J. Perlis"
           "If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is. - John von Neumann"
           "There's a difference between knowing the path and walking the path. - MORPHEUS, THE MATRIX (길을 아는 것과 길을 걷는 것은 다르다. - 영화 '매트릭스'에서)"
           "그러나 그들이 똑똑할 수록, 똑똑한 것처럼 행동하려는 압박은 덜 받는다. 그렇기에 '모르겠어요,' '아마 당신이 맞는 것 같아요,' 그리고 '전 X에 대해서는 충분히 이해하지 못해요'와 같은 말을 하는 능력에 따라 진짜로 똑똑한 사람들을 구별할 수 있다. - Paul Graham, 스타트업 어떻게 시작해야 하나? (How to Start a Startup?)"
           "Good code is like a good joke. it needs no explanation - Russ Olsen"
           "Do, or do not. There is no try. - Yoda"
           "앞으로 10년 간 당신이 사용하게 될 언어가 무엇이든 그것은 클로저(Clojure)로부터 깊은 영향을 받을 것이라는데 내기를 걸어도 좋다 - {Functional Programming for Java Developers}"
           "과학이란, 전문가 의견을 신뢰할 수 있는가에 대해 체계적으로 의심하는 것이다. - 리차드 파인만"
           "재능있는 사람은 아무도 맞출 수 없는 과녁을 맞추는 사람이고 천재란 아무도 볼 수 없는 과녁을 맞추는 사람이다. - 쇼펜하우어"
           "Netflix is a log generating company that also happens to stream movies - Adrian Cockroft (Cloud Architect at Netflix)"
           "If you give someone Fortran, he has Fortran. If you give someone Lisp, he has any language he pleases. - GuySteele"
           "If you can't measure it, you can't manage it. - Peter Druckeronce"
           "우리가 필요한 거의 모든 개념은 기본 속에서 찾을 수 있다. 라이브러리를 사용하는 방식으로는 정말로 실현 불가능할 경우에만 언어 확장 방식을 사용해야 한다. - Bjarne Stroustrup {C++ At Work: Rationales, Highlights, and a Farewell}"
           "중요한 작업은 반드시 눈에 띄어야 합니다. - Bjarne Stroustrup {C++ At Work: Rationales, Highlights, and a Farewell}"]}
 {:source "The Little Elixir & OTP Guidebook"
  :quotes ["If you've done any object-oriented programming, you'll find that processes resemble objects in many ways. You could even argue that this is a purer form of object-orientation."
           "Destructuring allows you to bind a set of variables to a corresponding set of values anywhere that you can normally bind a value to a single variable. - Common Lisp: The Language"
           "OTP is sometimes referred to as a framework, but that doesn't give it due credit. Instead, think of OTP as a complete development environment for concurrent programming."]}
 {:source "창의성을 지휘하라 (Creativity, Inc.)"
  :quotes ["픽사 사장으로서 내 목표는 언제나 픽사가 창업자들보다 오래 생존할 수 있게 픽사에 계속 생명력을 불어넣는 창의적 기업문화를 구축하는 것이었다."
           "존 래스터와 나는 어떤 직원이든 해결책이 생각나면 상사의 허락을 받을 필요 없이 이를 건의하고 문제 해결에 나서야 한다고 강조했다. 문제를 수정할 권한을 부여하지 않는다면 굳이 영리한 인재들을 채용할 의미가 있겠는가?"
           "내가 그동안 하도 실패를 긍정적으로 묘사해 작품을 만들어 나가는 과정에서 실패란 반드시 필요한 것이라는 믿음이 직원들에게 뿌리내린 탓인지 제작진은 내 칭찬을 듣고 마음이 상한 것 같았다. 제작진은 내 칭찬을 이전 작품을 제작한 동료들보다 덜 노력하고 덜 도전했다는 평가로 해석했다."
           "그렇지만 픽사가 성공할 수 있었던 핵심 비결은 따로 있다. 그것은 '문제는 항상 존재하는 법이고, 그중 상당수는 자신의 눈에 보이지 않는다'는 사실을 직원들이 인정한다는 점이다."
           "'이 업계에서 당신 외에 이 직책의 적임자로 누가 있을까요?' 나는 컴퓨터 기술 분야에서 인상적인 업적을 쌓고 있던 여러 사람의 이름을 주저 없이 늘어놓았다. 내 경쟁 상대가 될 수도 있는 사람들의 이름을 거리낌 없이 얘기한 것은 유타대학에서 형성된 가치관이 반영된 결과였다."
           "사람들은 '균형'이라는 단어를 들으면 가만히 앉아 있는 요가 수행자처럼 정적인 이미지를 연상하곤 한다. [.] 내게 있어 '균형'이라는 단어는 빠르게 변화하는 환경에 극도로 역동적으로 대응한다는 것을 의미한다."
           "운의 개입을 인정해야만 과거의 성공 방식을 되풀이 할 경우 성공할 가능성이 낮다는 점을 이해할 수 있다. [.] 나는 변화를 받아들이고 활용하는 것이 창의적 활동의 본질이라고 본다."
           "대기업이 조직의 일관성을 유지할 경우 누릴 수 있는 장점들이 있지만, 작은 산하 조직이 고유의 규칙들에 따라 작동하고 그 규칙들이 유효하다면 예외를 인정해줘야 합니다. 이런 예외가 직원들의 주인의식과 자부심을 높여 모기업에 해택을 주기 때문입니다."
           "나는 픽사가 조만간 또 다른 위기를 맞을 것이라고 생각한다. 창조적인 조직문화를 계속 활성화하기 위해서 경영자는 지속적인 불확실성을 두려워하지 말아야 한다."]}
 {:source "Modern C++ Design"
  :quotes ["시스템 아키텍처의 중요한 목적 중 하나는 특정 명제들을 'by design'에 의해 공리화시키는 것입니다. 예를 들면, 싱글톤 객체를 두 개 이상 만들어서는 안 됩니다. [.] 그리고 이러한 제약 조건들은 가능하면 컴파일 시에 걸러지도록 디자인되는 것이 이상적이라 할 수 있습니다."
           "단위전략 인터페이스의 중요한 특징은 고전적인 인터페이스(pure virtual 함수 집합)와는 달리 그것이 다소 모호하게 정의된다는 점입니다. 단위전략은 그 의미보다는 문법 자체에 더 초점이 맞추어져 있습니다. 다시 말하면, Creator 단위전략은 클래스가 정확히 어떤 동작을 하는 함수를 구현해야 하느냐보다는, 클래스를 구성하는 데 어떠한 문법적 구성이 올바른가를 말해줍니다."
           "(단위전략을 사용한) WidgetManager는 마치 작은 코드 생성기와도 같습니다. 그리고 사용자는 자신의 입맛에 따라 이 코드 생성기의 동작을 마음대로 제어할 수도 있는 것입니다."
           "지금까지의 디자인이란 것이 사실 실행 전에 어떤 자료형이 다른 자료형과 어떻게 상호작용을 하며, 사용자가 할 수 있는 일은 무엇이고, 또한 사용자가 할 수 없는 일은 무엇인지를 말해주는 규칙으로 가득 차 있지 않았습니까? 이제 단위전략을 사용하면, 몇 가지 간단한 선택을 조합하는 것만으로 새로운 디자인을 창조해 낼 수 있으며, 자료형에 따른 안정성까지도 보장받을 수 있습니다. [.] 호스트 클래스와 단위전략 간의 연결이 컴파일 타임에 이루어지기 때문에 [.]"
           "단위전략의 메커니즘은 템플릿과 다중 상속을 병용 [.]. 단위전략을 사용하는 호스트 클래스는 다수의 템플릿 인자를 가지는 또 다른 템플릿이며, 이때 각 템플릿 인자는 그것이 사용하는 단위전략을 가리키게 됩니다. 호스트 클래스는 자신이 선택한 단위전략들을 통해 그 기능을 간접화시키게 되며, 각 단위전략을 서로 밀접하게 응집시켜 주는 하나의 그릇으로써 작용하게 됩니다."
           "여기서부터 우리는 C++의 깊은 곳을 탐험하게 될 것입니다. 그곳은 이상하고도 새로운 규칙이 지배하는 세계, 즉 컴파일 타임 프로그래밍의 세계인 것입니다."
           "우리가 C++에서 컴파일 타임 프로그래밍을 하는 데 쓸 수 있는 유일한 도구는 바로 템플릿, 컴파일 타임의 정수 연산, 그리고 자료형에 대한 사용자 정의(typedef) 뿐입니다."
           "Knuth는 다음과 같이 말했습니다. '서두른 낙관론은 만악의 근원이다.' 하지만, '뒤늦은 비관론은 아무런 쓸모가 없다.'라는 Len Lattanzi의 말도 분명 가볍게 넘길 이야기는 아닙니다."
           "프로그램의 곳곳에서 백여 번에 걸쳐서 주의력을 소진하는 것보다는 당연히 단 한 번만 주의를 기울이는 편이 훨씬 행복한 경우일 것입니다."]}
 {:source "코딩호러의 이펙티브 프로그래밍"
  :quotes ["배를 만들고 싶다면 인부들을 재촉해서 나무를 끌어모으고 일을 분활해서 명령을 내릴 것이 아니라 그들이 저 넓고 끝없는 바다를 열망하게 만들어라. - 앙투안 드 생텍쥐페리"
           "기술적인 리더십의 가장 효과적인 모습은 예를 통해 리드하는 것이다. 개발과 관련된 리더 중에서 규율을 강제하기 위한 시간과 권위를 가지고 있는 사람은 거의 없다. 따라서 실제 행위만이 유일한 방법이다."
           "팀의 이익에 부합하지 않는 사람을 팀에서 제거하거나 혹은 심지어 해고하는 것을 두려워하지 말아야 한다. 기술은 개발할 수 있지만 긍정적인 태도는 개발할 수 없다. 한 프로젝트 내부에 이와 같이 문제를 야기하는 개인이 더 오래 머물수록, 그들이 낳은 부정적인 효과는 더 크게 퍼진다."
           "간단히 말해서 그들이 실험을 통해 발견한 것은, 최악의 팀원을 살펴보는 것은 해당 팀이 어느 정도의 성적을 거둘 것인가에 대한 최고의 척도가 된다는 사실이다. [.] 모든 것은 결국 최악의 팀원이 어떤 사람인가에 달려 있기 때문이다."
           "당신의 소프트웨어와 프로젝트는 결국 작은 디테일의 모음에 지나지 않는다."
           "다음에 UI를 디자인하게 된다면 반드시 사용자의 좁은 시야를 염두에 두어라. 사용자들의 시야가 얼마나 좁아질 수 있는지 깨달으면 놀랄 것이다. 필요한 내용을 바로 그들의 코앞에 놓아야 할지 오랫동안 치열하게 고민해야 한다."
           "알다시피, 안다고 알려진 것들이 있다. 우리가 안다고 아는 사실이다. 우리는 또 알고 있다. 모른다고 알려진 것들도 있다. 그것은 곧 우리가 알지 못하는 무엇인가가 있다는 사실을 알고 있는 것이다. 하지만 또한 아직 알려지지 않은 모르는 것도 있다. 우리가 모른다는 사실조차 모르고 있는 것들 말이다. - 도널드 럼스펠드"]}
 {:source "대체 뭐가 문제야? (Are Your Lights On?)"
  :quotes ["어떤 질문을 던져야 할까? '누가' 문제를 안고 있는가? 그것은 어떤 문제인가? 혹은, 이 시점에서 도대체 뭐가 '문제'란 말인가?"
           "풋내기 문제 해결사들은 해결해야 할 문제를 정의하는 데 시간을 보내기보다는 대부분 성급하게 해결안을 찾아내는 데에 매달린다. [.] 저마다 원하는 해결안을 채택하기 위해 논쟁할 때에도 상대방의 고집스러움은 비난하면서 정작 편협한 관점을 비판하는 경우는 드물다."
           "우리는 한쪽이 다른 쪽과 동일하게 아픔을 느끼기 시작하면, 결국 문제의 해결안을 찾게 된다는 것을 알고 있다. 미국 인디언들은 이런 문제 해결 기법을 '모카신 바꿔 신고 걷기'라고 이름 붙였다."
           "문제란 바라는 것과 인식하는 것 간의 차이다."
           "우리는 결코 문제들을 제거할 수 없다. 문제들, 해결안들 그리고 새로운 문제들이 끝없는 사슬을 구성한다. 우리가 바랄 수 있는 최고의 기대는 새로운 문제가 우리가 해결한 문제보다 덜 성가신 것이었으면 하는 것이다."
           "많은 사람이 우리에게 '나의 가장 큰 문제는 내가 그렇게 뛰어난 문제 해결사가 아니라는 점입니다.'라고 말하곤 한다. 헛소리다. 우리가 그 문제가 무엇인지를 파악하는 것에 비하면, 문제를 해결하거나 해소하는 것은 오히려 사소한 일이다."]}
 {:source "Remote: Office Not Required"
  :quotes ["Remote work pulls back the curtain and exposes what was always the case, but not always appreciated or apparent: great remote workers are simply great workers."
           "Being a good writer is an essential part of being a good remote worker. When most arguments are settled over email or chat or discussion boards, you'd better show up equipped for the task."
           "The new luxury is to shed the shackles of deferred living - to pursue your passions now, while you're still working."
           "The future is already here - it's just not evenly distributed. - WILLIAM GIBSON"
           "If you ask people where they go when they really need to get work done, very few will respond 'the office.' If they do say the office, they'll include a qualifier such as 'super early in the morning before anyone gets in' or 'I stay late at night after everyone's left' or 'I sneak in on the weekend.'"
           "The ability to be alone with your thoughts is, in fact, one of the key advantages of working remotely."
           "long commutes make you fat, stressed, and miserable. Even short commutes stab at your happiness."
           "That's 1.5 hours a day, 7.5 hours per week, or somewhere between 300 and 400 hours per year, give or take holidays and vacation. Four hundred hours is exactly the amount of programmer time we spent building Basecamp, our most popular product."
           "The big transition with a distributed workforce is going from synchronous to asynchronous collaboration."
           "The luxury privilege of the next twenty years will be to leave the city. Not as its leashed servant in a suburb, but to wherever one wants."
           "The new luxury is the luxury of freedom and time. Once you've had a taste of that life, no corner office or fancy chef will be able to drag you back."
           "Cabin fever is real, and remote workers are more susceptible to it than those forced into an office. Fortunately, it's an easy problem to address. Remote work doesn't mean being chained to your home office desk."
           "The best way we've found to accurately judge work is to hire the person to do a little work before we take the plunge and hire them to do a lot of work. Call it 'pre-hiring.'"
           "We don't believe in asking people to solve puzzles. Solving real problems is a lot more interesting and enlightening."
           "Would be remote workers and managers have a lot to learn from how the open source software movement has conquered the commercial giants over the past decades. It's a triumph of asynchronous collaboration and communication like few the world has ever seen."
           "If you've read about remote-work failures in the press, you might think that the major risk in setting your people free is that they'll turn into lazy, unproductive slackers. In reality, it's overwork, not underwork, that's the real enemy in a successful remote-working environment."
           "When there's a complicated matter to discuss, one requiring a lot of interaction to sort through, few things beat a face-to-face meeting. However, when such meetings occur all the time, they begin to lose their value."
           "The scarcity of such face time in remote working situations makes it seem that much more valuable. And as a result, something interesting happens: people don't waste the time. An awareness of scarcity makes them use it wisely."
           "divide the day into chunks like Catch-up, Collaboration, and Serious Work."
           "Remote isn't binary. It's not here or there, this or that. In fact, for many, the hybrid approach is the right place to start."
           "working remotely doesn't have to mean working from home."
           "There are two fundamental ways not to be ignored at work. One is to make noise. The other is to make progress, to do exceptional work. Fortunately for remote workers, 'the work' is the measure that matters."]}
 {:source "설명 잘하는 법"
  :quotes ["곰곰이 생각해보면 직장은 물론이고 일상생활에서도 모든 것이 설명의 연속이다. 남에게 부탁을 하거나 자신의 행동을 이해하게 하려면 어쨌거나 설명을 해야한다."
           "모두가 바쁘게 움직이는 직장에서는 굳이 말하지 않아도 눈치로 짐작할 것이라는 생각 때문에 설명을 생략하는 경우가 종종 있다. 그러나 글로벌 시대에서는 이런 '이심전심'이나 '눈치'문화는 더 이상 통하지 않음을 명심하라."
           "설명에는 주제와 테마가 있다. 주제란 이야기의 논점을 집약해 놓은 것이다. 따라서 주제가 분명하지 않으면 논점도 산만해진다. 설명의 핵심은 전달할 내용의 주제를 간결하게 표현해내는 일이다."
           "말을 할 때는 가장 중요한 내용부터 시작해야 한다. 중요한 일이란 대체로 상대방이 가장 듣고 싶어하는 내용일 경우가 많다."
           "키워드란 문자 그대로 '열쇠가 되는 단어'라는 의미다. 따라서 설명 속에 키워드가 없으면 듣는 사람은 의미를 파악하지 못하거나 잘못 받아들이기도 한다."
           "사물의 본질을 정확히 표현해주는 결정적인 한 단어가 나오면 듣는 사람은 '아하, 그렇구나!'라며 쉽게 이해한다. 다시 말해 화자가 아무리 장황하게 설명을 늘어놓아도 키워드가 빠져 있으면 요령부득이라는 의미다."]}
 {:source "능률적인 프로그래머"
  :quotes ["프로그래머 능률의 원칙을 정의했다. 가속, 집중, 자동화, 정식화는 프로그래머를 능률적으로 만드는 키워드이다."
           "숙련된 목조 세공사의 작업실을 찾은 적이 있다면 여기저기 놓인 많은 특수 도구를 봤을 것이다. 공작물 제조 시 목조 세공사는 바닥의 작은 나무 조각으로 공작물 일부를 임시로 떨어뜨리거나 고정하는데 이들 조각을 공학 용어로 '지그(고정구, jig)'나 '심(쐐기, shim)'이라고 한다. 소프트웨어 개발 시 우린 이런 소모성 보조재를 너무 적게 만들어 쓰는데, 이유는 보통 목조 세공사와 같은 개념으로 도구를 받아들이지 않기 때문이다."
           "컴퓨터는 단순 반복 처리를 아주 빠르게 할 수 있도록 설계됐다. 이상한 건 컴퓨터가 할 일을 사람이 하고 있다는 점이다. 사용자는 삽질하고 컴퓨터는 논다. 어쩌다 이렇게 됐을까?"
           "자동화할 기찬 방법을 연구하다 보면 계속 배우게 돼 점점 똑똑해진다. 앞의 루비 프로그램을 짜는 데 시간이 오래 걸린 이유 중 하나는 루비로 저수준 파일을 조작하는데 서툴렀기 때문이다. 이제는 알고, 다른 프로젝트에 써먹을 수도 있다. 프로젝트 인프라 일부를 자동화할 방법도 찾았으니, 간단한 작업 자동화는 더 쉽게 할 가능성이 높아졌다."]}
 {:source "페르시아의 왕자 : 조던 메크너의 게임 개발일지"
  :quotes ["일단 비디오카메라를 사서 가능한 한 최선의 영상을 찍어 (노이즈를 감수하고) 디지타이징할 것. 이걸 일단 예시로서 게임에 끼워 놓고 나머지 부분의 프로그래밍을 계속할 것. 그러다가 나중에 내가 원하는 것이 무엇인지가 좀 더 명확해지면 그때 실제로 사용할 영상을 '슈퍼 8'로 다시 찍으면 된다."
           "만약 주인공의 각 프레임에 베타적 논리연산(XOR)을 걸어 픽셀값을 1비트씩 밀어보면 어떨까? 눈앞에 유령처럼 희미하게 빛나는 윤곽을 가진, 검은색 옷에 얼굴과 팔은 하얀, 주인공을 쫓아 주인공처럼 달리고 뛰는 새 캐릭터가 떠올랐다. ... '섀도우맨이네!'"
           "게임 시작 시에는 스토리가 전부다. 막바지에 다다르면 스토리는 실질적으로 아무 의미가 없다. 게임 경험이 순수한 게임 플레이로만 정제되는 것이다."
           "에릭과 함께 마흔 장 남짓의 스냅 사진들을 사무실 바닥에 쫙 깔아 놓고 연구했다. 영화 '로빈 후드'에서 바질 레스본과 에롤 플린이 펼쳤던 클라이맥스의 칼싸움 대결 신을 해체해본 것이다. 우리는 정말 머리가 깨지도록 고민했다."
           "내 인생에 대한 쓸데없는 통계치를 모으는 노력의 일환으로 계산해 본바, 지난 4년간 내가 '페르시아의 왕자' 개발에 대략 3,800시간, 그러니까 풀타임 작업 일수로 쳐도 2년을 채울 만큼의 시간을 쏟았다는 걸 알았다."]}
 {:source "프로그래머의 길, 멘토에게 묻다"
  :quotes ["알지도 못하며 그 사실도 모르는 자, 바보로다. 그를 멀리하라! 알지 못하나 그 사실을 아는 자, 못 배운 자로다. 그를 가르치라! 알고 있으나 그 사실을 모르는 자, 잠든 자로다. 그를 깨우라! 알고 있으며 그 사실을 아는 자, 깨우친 자로다. 그를 따르라! - 아랍 속담"
           "견습과정은, 기예를 통달하겠다는 필생의 열정을 서서히 불어넣는다는 점에서 중요하다. 이는 끊임없이 배우고자 하는 열정을 점점 쌓이게 하며, 그런 과정 속에서 견습생은 탁월한 개발자가 될 수 있다. from 피트 맥브린, software craftsmanship"
           "학습 상황이란 본질적으로, 자기가 무엇을 하고 있는지 정말로 알고 있는 누군가를 도우면서 배워가는 과정이다. from 크리스토퍼 알렉산더 외, A Pattern Language"
           "대개 발걸음 하나하나마다 새로 시작한다는 느낌이 들어야 한다. 이것이 초심이며, '되고 있음'의 상태다. from 순류 스즈키, 'Zen Mind, Beginner's Mind'"
           "무참한 실패를 맛본 적이 한 번도 없다면, 당신은 뭔가 가치 있는 일을 시도했던 적이 한 번도 없었다고 봐야 한다. - 크리스토퍼 호킨스"
           "'합기도를 마스터하려면 얼마나 걸리나요?' 수련 지망생이 묻는다. 여기에 대한 훌륭한 대답은 이것뿐이다. '자네 얼마나 오래 살 것 같나?' from 조지 레너드, Mastery"
           "나는 프로그래밍을 일종의 공예로 본다. 공예는 예술의 일종이긴 하나 순수 예술은 아니다. 장식적인 면이 가미될 수는 있겠지만, 공예는 어쨌거나 쓸모 있는 물건을 만드는 작업이다. 하지만 순수 예술은 오직 아름다움을 목적으로 하는 무언가를 만드는 일이다. from '예술과 프로그래밍'에 대한 리처드 스톨만의 견해"
           "우리는 수리를 하면서 그것이 동작하는 원리를 이해하는 경우가 종종 있다."
           "황금 족쇄(Golden Lock) - '뭔가 새로운 걸 배우고 싶지만, 내가 이미 알고 있는 것만으로도 벌이가 너무 좋다.' - 제랄드 와인버그, 'More Secrets of Consulting'"
           "죽음의 행진은 여러 소프트웨어 개발 조직에서 흔히 볼 수 있는 영웅 심리에 기인한다. 긴 여정을 걷는 사람들은 몇 년 정도 전력 질주한 후에 그냥 소진되어 버리는 영웅이 아니다. 그들은 수십 년은 지속할 수 있는 걸음걸이로 움직이는 사람들이다."
           "자네를 선임 엔지니어에서 수석 엔지니어로 승진시키겠네. 급여는 그대로지만 사람들이 자네를 조금 덜 무시할거야. from 딜버트의 뾰족 머리 상사"
           "숙련됨은 연습을 중단하는 그 시점부터 퇴보하기 시작한다. from 피트 맥브린"
           "당신이 속하는 어느 밴드에서든지 제일 뒤떨어진 사람이 되도록 하세요. from 팻 메스니"
           "만일 그래도 괜찮다면, 우리는 일을 진지하게 시작하기도 전에 늘 뭔가 주의를 돌릴 만한 일이 일어나지 않을까 하고 기다려 볼 것이다. 큰 성취를 이루는 사람들이란 지식을 너무나 갈망하여 좋지 않은 여건에서도 그것을 탐구하는 이들이다. 여건이 좋을 때란 결코 오지 않는다. from C.S. 루이스, 'Learning in War-Time', 'The Weight of Glory and Other Address'"
           "우리가 마스터라고 알고 있는 사람들은 어떤 특정한 기술에 더 능숙해질 목적으로 거기 전념하지는 않는다. 사실 그 사람들은 연습하는 것 자체를 좋아하며, 이 때문에 그들이 점점 더 능숙해지는 것이다. 그리고 더 능숙해질수록 기본적인 동작을 더 즐기게 되는 선순환이 완성된다. from 조지 레너드, Mastery"
           "소프트웨어를 만들면서 우리는 업무 중에 연습을 하는데, 그것이 업무 중에 실수를 하게 되는 원인이다. 우리는 작업적인 일과 연습을 구분할 방법을 모색해야 한다. 우리에게는 연습 시간이 필요하다. - 데이브 토머스, 코드 카타(Code Kata)에 대한 글"
           "연습이란 이론적으로 좋은 것이지만, 주기적인 피드백을 받지 못한다면 오히려 나쁜 습관을 들이고 있는 것일 수도 있다."
           "어떤 일이든 간에 사랑하지 않고서는 정말로 잘 할 수가 없다. 그리고 당신이 해킹을 사랑한다면 필연적으로 자신만의 프로젝트를 하게 될 것이다. from 폴 그레이엄, 'Hackers & Painters'"
           "프로그래밍 능력을 테스트하는 가장 좋은 방법 중 하나는, 프로그래머에게 30페이지 정도의 코드를 건네주고서 그 사람이 얼마나 빨리 그 코드를 통독하고 이해하는지 보는 것이다. from 빌 게이츠, 'Programmers at Work'"
           "피터의 법칙 : 조직에서 일하는 모든 사람은 자신의 무능력 수준에 도달할 때까지 승진한다."
           "반경험(Anti-Experience)이란, 해마다 쌓이는 '경험'이라는 것이 나쁜 습관을 더욱 강화하는 것에 지나지 않게 되는 현상을 일컫는다."
           "쓰는 행위 자체가 가진 힘 역시 과소평가해서는 안 된다. (중략) 당신은 더 큰 목적의식을 잃어버릴수도 있을 텐데, 쓴다는 행위는 한 발짝 물러서서 문제에 대해 깊이 생각할 수 있도록 해 준다. 앞뒤없는 비난의 글을 쓰는 사람이라도 어느 정도는 생각을 해야만 한다. from 아툴 가완디, 'Better'"
           "천재성은 종종 잘못 이해된다. 그것은 탁월한 지적 능력의 문제가 아니라 성격의 문제다. 천재성은 무엇보다도 기꺼이 실패를 인지하고, 미봉책으로 가리려 하지 않으며, 변화하고자 하는 의지를 필요로 한다. 그것은 실패에 대한 의도적이고 심지어는 강박적인 성찰과, 새로운 해법에 대한 지속적인 탐색에서 비롯된다. from 아툴 가완디, 'Better'"
           "좋은 프로그래밍 책을 두 달에 한 권, 즉 일주일에 대략 35페이지 정도만 읽어도, 당신은 이내 이 분야에 대해서 확실한 감을 갖게 될 것이며 주변의 거의 모든 이들과 구별되는 수준으로 올라설 것이다. from 스티브 맥코넬, 'Code Complete'"
           "조슈아 케리에브스키가 언젠가 제리 와인버그에게, 어떻게 하면 쏟아져 나오는 그 모든 책들을 따라잡을 수 있느냐고 물었다. 제리가 대답했다. '그건 쉽습니다. 나는 제일 훌륭한 것들만 읽지요.' from 'Refactoring to Patterns'"
           "어떤 개념을 정말로 이해하려면 그 개념이 최초로 언급된 당시의 전후 맥락을 재구성해 볼 필요가 있다. 이렇게 해야 개념의 정수가 그 모든 중간자를 거치고도 살아남았음을 확인할 수 있다."
           "바퀴 자국 안에 빠지게 되면 아무리 바퀴를 돌려도 계속 제자리고, 유일한 진척이라고는 더 깊게 파이는 자국뿐이다. from 트와일라 타프, 'The Creative Habit'"
           "명장들의 침묵 속에 담긴 실마리들을 끄집어내기 위해 그들 스스로 설명하도록 계속 졸라야 하며, 망묵적인 지식을 명시적인 형태로 드러내도록 독촉해야 한다."
           "대부분의 프로그래머들은 자신이 평균 이상이라고 생각한다. 하지만 현실은, ... 비대칭적인 분포로 인해 대부분 평균 이하다... 역량 분포 곡선의 극단에 위치한 사람들이 전체 분포를 기울게 만드는 것이다."
           "증명의 부재가 곧 부재의 증거는 아니다."]}
 {:source "앱만장자(appillionaires)"
  :quotes ["하지만 앱은 이머징 산업이고, (대기업들이) '앱스토어에서 돈 벌기'라는 분야에 눈을 돌리기 시작해, 그 공식을 이해하고 (취미 프로그래머들을) 밀어내기 시작하는 시점이 올 겁니다. 대기업들은 다른 업체와 통합을 할 것이고, 자신의 방에서 일하는 프로그래머들은 돈을 벌기 위해 더 큰 회사에 합류해야 할지도 모릅니다."
           "'소파에서 박차고 일어나 뭔가를 이뤄낼 것인가 말 것인가'라는 영원한 수수께끼는 여전히 남아 있다. 시도를 해도 실패할 가능성이 높다. 그러나 아무것도 하지 않으면 반드시 실패한다. 앱스토어는 여러분이 언제나 한번쯤 실행에 옮기고 싶었던 아이디어를 시험해 볼 수 있는 창의성의 리트머스 테스트와 같다."
           "앵그리 버드는 하룻밤 사이에 만들어진 성공이 아니다. 앵그리 버드가 만들어지기까지 사촌형제인 니클라스와 미카엘 헤드는 52번의 시도를 했고, 그 과정에서 그들의 회사는 거의 파산 직전까지 갔다."]}
 {:source "패턴을 활용한 리팩토링"
  :quotes ["패턴은 프로그램 내에서 볼 수 있는 어떤 것이기도 하지만, 동시에 프로그램을 변환하는 것이기도 합니다. 각 패턴은 패턴 적용 전과 후의 모습으로 설명할 수 있습니다. 이는 패턴을 리팩터링으로 생각할 수 있는 또 다른 방법이기도 합니다. - Ralph Johnson"
           "이 책은 리팩터링과 패턴의 결합에 대한 것이다. 이 책에서는 설계 초기 단계부터 패턴을 적용하는 것보다 기존 설계를 개선하는 데 패턴을 사용하는 것이 더 낫다고 말한다."
           "사전 설계에서 패턴을 사용하거나 또는 패턴을 너무 일찍 코드에 도입하는 대신, 특정 패턴이 꼭 필요한 시기에 리팩터링을 통해 도입하는 방법을 취했다. 패턴을 이용하는 이런 새로운 방법은 XP를 수용하면서 사용하기 시작했는데, 과도하거나 미진한 설계를 피하는 데 도움이 됐다."
           "'리팩터링의 결과로 나온 구조'인 패턴에 많이 익숙해진 지금, 나는 패턴의 최종 결과나 그 결과의 구현이 의미하는 바를 이해하는 것보다 패턴을 목표로 한 또는 패턴을 지향한 리팩터링을 하는 이유를 이해하는 것이 훨씬 가치 있다고 생각한다."
           "더 훌륭한 소프트웨어 설계자가 되려면, 훌륭한 소프트웨어의 설계가 어떻게 발전해왔는지 그 과정을 공부하는 것이 훌륭한 설계 자체를 공부하는 것보다 훨씬 중요하다. 그 발전 과정 속에 진짜 지혜가 숨어 있기 때문이다."
           "설계 부채는 다음 세 가지를 꾸준히 수행하지 않을 때 발생한다. 1. 중복 제거 2. 코드 단순화 3. 코드 의도 명료화"
           "기술 문제를 논의하는 데 설계 부채라는 금전적 비유를 사용하는 것이 경영진을 설득하는 데 큰 도움이 된다는 것은 이미 검증된 사실이다. 설계 부채에 대해 말할 때 나는 반복적으로 신용카드를 꺼내 관리자에게 보여준다."
           "패턴 중독은 패턴의 과용을 초래하는 경우가 많다. 패턴에 매혹되어 아무 코드에나 패턴을 사용해야 직성이 풀린다면, 패턴 중독이라 할 수 있다. 패턴에 중독된 프로그래머는 패턴 구현의 경험을 얻기 위해, 또는 정말 훌륭하고 복잡한 코드를 잘 작성한다는 명성을 얻기 위해 시스템에 패턴을 도입하려 노력할 것이다."
           "패턴의 진정한 성과는 패턴을 현명하게 사용할 때 나타난다. 리팩토링은 중복을 제거하고, 코드를 단순화하고, 코드가 그 의도를 잘 드러내도록 하는 데에 우리의 주의를 집중하도록 함으로써, 패턴을 현명하게 사용하도록 도와준다."
           "리팩토링을 통해 점진적으로 패턴을 도입하면, 패턴으로 인한 과도한 설계가 발생할 기회도 줄어든다. 그리고 리팩토링을 더 잘 이해할수록 패턴이 주는 즐거움을 이해할 확률도 높아진다."
           "패턴의 구조 다이어그램은 명세가 아니라 단지 예제일 뿐이라는 것은 아무리 강조해도 지나치지 않을 것 같다. 구조 다이어그램은 우리가 가장 자주 본 구현을 나타낼 뿐이다. - Design Pattern 공동 저자 John Vlissides"
           "패턴 구현에 있어 최소주의자(minimalist)가 되는 것은 발전적 설계를 위한 연습의 일부다. 많은 경우, 패턴을 사용하지 않은 구현을 패턴을 사용하도록 발전시켜야 할 필요가 있다. 그렇다면 리팩터링을 통해, 패턴 구현의 단순한 버전을 우선 사용하도록 만들 수 있다."
           "리팩토링은 그 결과로 패턴을 도입할 수도 있고 제거할 수도 있다. 또는 패턴으로 가는 중간 단계에서 머무르게 할 수도 있다. 그러나 진짜 목표는 패턴을 구현하는 것이 아니라 더 좋은 설계를 얻는 것임을 명심하기 바란다."
           "일반적으로 패턴 구현은 중복을 제거하고, 로직을 단순화하고, 의도를 잘 전달하고, 융통성을 높이는 데 도움이 돼야 한다. 그러나 위의 일화에서도 알 수 있듯이, 패턴에 얼마나 익숙하냐에 따라서 패턴에 기초한 리팩토링에 대한 인식이 달라질 수 있다."
           "JUnit을 개발한 Kent Beck과 Erich Gamma가 처음부터 가능한 많은 패턴을 적용하려 했던 것은 아니다. 단순히 프레임워크를 발전시키면서 설계에 패턴의 지혜를 재사용한 것이었다. ... 그들은 패턴을 목표로 또는 패턴을 향해 리팩토링을 한 것이 분명했다. 그리고 패턴에 대한 지식이 그 리팩토링 작업에 가장 확실한 도움이 됐을 것이다."
           "자신이 작성한 문장이라 할지라도 초연하고 비평적인 시각으로 반복해서 읽으면, 곳곳에서 잘못된 점을 계속 발견하게 될 것이다. - Barzun, Jacques"
           "조급하게 최적화를 시도한 코드는 그렇지 않은 코드보다 리팩토링하기 어렵다. 일반적으로, 코드가 최적화된 상태보다는 그 전의 상태에서 설계 개선을 위한 대안을 찾아내는 것이 더 쉽다."
           "패턴과 리팩토링에는 자연스러운 관계가 있다. 패턴은 우리가 있고 싶은 곳이고, 리팩토링은 그곳에 이르는 방법이다."
           "많은 사람들이 이 책을 읽고는 이런 패턴을 구현하는 절차를 외우려 할 것입니다. 또는 기존 프로그래밍 도구에 이런 대규모 리팩토링을 추가해야 한다고 떠들어댈지도 모르겠습니다. 두 접근법 모두 잘못된 것입니다. 이 책의 진정한 가치는 특정 패턴에 도달하기 위한 절차에 있는 것이 아니라, 각 절차에 이르는 사고 과정을 이해하는 데 있습니다. 리팩토링적인 사고방식을 배움으로써(수학적 사고 방식을 배웠던 것과 같이) 동작이 보존되는 절차를 통해 설계 문제를 해결하는 방법을 익히는 것입니다. - John Brant, Don Roberts (세계 최초의 리팩토링 브라우저 발명가)"]}
 {:source "만화의 이해"
  :quotes ["카툰화법은 단순히 그림의 방법일 뿐만 아니라, 보는 방법입니다!"
           "두 사람이 얘기할 때는 보통 마주보기 마련인데, 이때 서로 상대방의 얼굴 특성을 생생하게 보게 됩니다. 그들은 끊임없이 자기 얼굴을 의식하는데, 이때 정신에 떠오르는 모습은 전혀 생생하지 않습니다. 단지 대강의 모양과 배열... 일반적인 배치 정도의 느낌입니다. 단순하고 기본적인 어떤 것... 바로 카툰화로 말입니다. 그래서, 얼굴을 사진이나 사실화로 대할 때는... 그것을 다른 사람의 얼굴로 보게 됩니다. 하지만 카툰화의 세계로 들어오면... 자기 자신으로 보이는 것입니다."
           "부분들을 목격하면서도, 이것을 전체로 인지하는 이런 현상을 일컫는 용어가 있습니다. 완결성 연상(closure association)입니다."
           "만화는 단일 감각 매체입니다. 만화는 한 가지 감각만으로 경험의 세계를 전달합니다. 이 칸 안에서 전달되는 정보는 모두 시각정보입니다. 하지만 칸과 칸 사이에는 어떤 감각도 필요하지 않습니다. 그렇기 때문에 오히려, 우리의 모든 감각이 개입하게 됩니다!"
           "칸과 칸 사이에서 일어나는 일은 만화만이 해낼 수 있는 일종의 마술입니다."
           "예술이란 인간의 두 가지 기본 본능인 생존본능과 생식본능에서 나오지 않는 모든 인간활동을 뜻합니다."
           "예술가와 대중을 가르는 벽을 깨부술 수 있는 단 하나의 힘이 있습니다. 바로 이해의 힘입니다."
           "오늘날, 만화는 아직까지도 개인의 목소리가 직접적으로 반영될 수 있는 몇 안되는 대중매체 중 하나입니다."]}
 {:source "단순하게 말하라"
  :quotes ["단순한 대화는 배려를 바탕으로 한다. 자신이 말하는 것보다 상대가 어떻게 듣느냐가 대화의 결과를 좌우하기 때문이다. 따라서 자신이 원하는 것을 정확히 전달하기 위해서는 상대가 자신의 말을 어떻게 받아들일지 고려하는 과정이 필요하다."]}
 {:source "만화의 미래"
  :quotes ["만약 필요가 발명의 어머니라면, 발명은 욕망의 어머니입니다."
           "'벡터 그림'은 마술 고무줄 한세트를 사용하는 것으로 비유되어 왔습니다. 그리고 '비트맵 그림'은 지적이고 생생한 컬러 모래상자에 비유될 수 있습니다."]}
 {:source "바보상자의 역습"
  :quotes ["대중문화는 우리가 저질, 통속이라고 무시하는 연예물을 통해 지속적으로 아주 조금씩 우리 뇌를 명민하게 만들고 있다. 이런 상향 트랜드를 나는 슬리퍼 커브(Sleeper Curve)라고 이름 지었다. 슬리퍼 커브는 우디 앨런의 고전 공상과학 영화 <슬리퍼>에서 착안했다. 2173년 미래세계에서 과거로 온 과학자들이 크림 파이와 핫 퍼지를 다이어트의 적이라며 무시하는 20세기 인간을 보고 충격을 받는 장면처럼, 우리가 무시하는 대중문화가 정작 엄청난 가치를 지니고 있을지도 모른다."
           "'어떤 메시지를 보내느냐?'가 대중매체를 평가하는 유일한 잣대가 되어서는 안 된다. 메시지만큼 중요한 것은 그 문화적 경험을 이해하기 위해 어떤 사고과정을 겪느냐는 것이다."
           "게임에 대해 반드시 알아야 할 것 중 기사에서 다루어지지 않는 내용이 있다면 바로 게임이 잔인할 정도로, 가끔은 미치도록 '어렵다'라는 사실이다."
           "종종 비디오 게임을 두고 선정적인 뮤직비디오와 패스트푸드 같은 천박한 인스턴트 즐거움이라 이야기하는 것을 듣게 될 테지만, 대부분의 대중오락과 비교해 게임은 '기다려야 얻을 수 있는' 즐거움에 관한 것이다."
           "탐색과 접어 넣기는 현대 문화의 또 다른 성향을 반영한다. 적극적인 사고와 분석을 촉진하는 문화, 주위환경을 이해하기 위한 두뇌 노동을 강요하는 문화의 등장이 바로 그것이다."
           "텔레비전과 자동차가 사람들을 거실에 가둬버렸다면 인터넷은 이를 바꾸려 한다. 반세기를 거쳐 이제 우리는 새로운 커뮤니케이션 방법을 배우고 있는 것이다."]}
 {:source "생각의 탄생"
  :quotes ["직감과 직관, 사고 내부에서 본질이라고 할 수 있는 심상이 먼저 나타난다. 말이나 숫자는 이것의 표현수단에 불과하다. - 아인슈타인"
           "과학적 방법으로 일을 한다는 것은 내가 직관적으로 알아낸 어떤 것을 과학의 틀 속으로 집어넣는 것이다. - 매클린턱"
           "신경학자 안토니오 다마지오는 갑작스러운 사고나 뇌졸중, 종양으로 정서적 감응구조가 총체적으로 바뀐 신경질환자들은 합리적으로 계획을 세우는 능력이 부족하다는 것을 알아냈다. 의사결정 과정에서 정서적으로 몰입할 수 없기 때문이다. 느낌과 직관은 '합리적 사고'의 방해물이 아니라 오히려 합리적 사고의 원천이자 기반이다."
           "나는 어떤 생각이 떠오르면 그것의 모양을 당장 머릿속에서 그려본다. 그리고 상상 속에서 구조를 바꾸거나 작동을 시켜본다. - 공학자 니콜라 테슬라"
           "나는 피아노 앞에서 실제 노래를 부르는 것보다 머릿속으로 음악연습을 더 많이 한다. 가수라면 음악을 볼 수 있어야 하기 때문이다. - 테너가수 루치아노 파바로티"
           "진정한 의미에서 추상화란 현실에서 출발하되, 불필요한 부분을 도려내가면서 사물의 놀라운 본질을 드러나게 하는 과정이라고 할 수 있다. 그러므로 우리가 궁극적으로 할 일은 추상화 자체의 본질을 찾아내는 것이다."
           "어느 누구도 드로잉이 아닌 음악이나 춤, 말, 혹은 수로 추상화를 하겠다는 생각을 하지 않는다. 이 모든 의사전달매체들이 추상을 표현하는 데 사용될 수 있음에도 불구하고 막상 추상화과정에서는 배제된다."
           "과학자, 화가, 시인들은 모두 복잡한 체계에서 '단 하나의 변수'만 제외하고 모두 제거함으로써 의미를 반영하려고 애쓴다."
           "패턴을 알아낸다는 것은 다음에 무슨 일이 일어날지 미리 하는 것을 의미한다. 패턴인식능력은 예측과 기대형성능력의 기초가 된다."
           "전반적으로 많은 철학자들은 유추를 비논리적이고 판단을 그르치게 하는 것으로 평가절하한다. 그러나 오히려 유추가 불완전하고 부정확한 것이기 때문에 알려진 것과 알려지지 않은 것들 사이의 다리가 될 수 있는 것이다."
           "고대 중국에는 다음과 같은 격언이 전해 내려온다. '나는 듣고 잊는다. 나는 보고 기억한다. 나는 행하고 이해한다.' 그러므로 그냥 앉아 있지만 말라. 원숭이처럼 움직이다 보면 자신이 어느새 문제를 풀고 있음을 알게 될 것이다. 오직 몸만이 어떻게 답해야 하는지 알고 있기 때문이다."
           "과거 20년 간의 주요한 공학적 실패(다리, 건물, 로켓, 비행기 등)가 작업모형을 제작하는 직접 경험이 줄고, 대신에 컴퓨터그래픽에 대한 의존도가 계속 늘어난 데서 기인한다고 주장하고 있다."
           "작곡가인 슈만은 이렇게 말하고 있다. '교양 있는 음악가라면 라파엘로의 마돈나 그림을 연구해야 하며, 화가라면 모차르트의 교향곡을 공부해야 한다.'"]}
 {:source "학문의 즐거움"
  :quotes ["인간의 두뇌는 과거에 습득한 것의 극히 일부밖에 기억해 내지 못하게 되어 있다. 그런데 왜 사람은 고생해서 배우고, 지식을 얻으려고 하는가? 나는 '지혜'를 얻기 위해서라고 말하고 싶다. 배워 나가는 과정에서 지혜라고 하는, 눈에 보이지 않지만 살아가는 데 있어 매우 중요한 것이 만들어진다고 생각한다."
           "나는 창조의 기쁨 중의 하나는 자기 속에 잠자고 있던, 전혀 생각하지 못했던 재능이나 자질을 찾아내는 기쁜, 즉 새로운 나를 발견하고 더 나아가서는 나 자신을 보다 깊이 이해하는 기쁨이라고 말하고 싶다."
           "그들이 나와는 상대가 안 될 정도의 재능을 보였을 때 나는 혼자 이 노래를 부르면서 체념하곤 했다. 체념하라고 해서 모두를 포기하는 것은 아니다. 그렇게 하면 질투심이 안 생긴다. 그리고 남을 질투하는 마음이 없으면 자기의 정신 에너지가 조금도 소모되는 일이 없고 판단력도 둔해지지 않는다. 결국 그것이 창조로 이어져 갈 것이라고 나는 생각한다."
           "나는 사람들이 사인을 원할 때 '소심심고(素心深考)'라고 쓴다. 이렇게 쓰는 까닭은 '소박한 마음으로 돌아가서 다시 깊이 생각하라.'라고 나 자신에게 항상 타이르고 있기 때문이다."]}
 {:source "큐레이션"
  :quotes ["우리가 다룰 '큐레이션'이라는 용어 역시 그 의미가 빠르게 변화하고 있다. 본래 박물관이나 미술관에서 작품을 전시한다는 의미를 가진 큐레이션이라는 용어는 오늘날 어디에서나 통용되는 말이다. 영화제에서는 상영 프로그램을 큐레이트하고, 웹사이트는 게시글을 큐레이트한다. '큐레이션'은 한때 교양 있고 고급스러운 이미지를 가진, 평범한 서민과는 거리가 먼 단어였다."
           "큐레이션은 인간이 수집, 구성하는 대상에 질적인 판단을 추가해서 가치를 더하는 일이다."
           "'큐레이션'을 지향하는 트렌드의 진정한 의미는 개인이 열정과 틈새 지식을 바탕으로 가치를 창출하고 세상에 공개할 수 있는 사상 초유의 미래를 맞게 되었다는 점이다."
           "큐레이션은 일상을 압도하는 콘텐츠 과잉과 우리 사이에 인간이라는 필터 하나를 더 두어서 가치를 더하려는 노력이다. 이로써 정보의 홍수가 빚어내는 잡음은 사라지고 세상은 명료해진다. 이 명료함은 우리 스스로 선택하고, 우리가 신뢰하는 사람의 도움을 받아 이르게 되는 상태다."
           "사람들은 웹이 혼란스럽다고 느끼지만 서점은 그렇게 보지 않죠. 필터는 우리가 관심 없는 99퍼센트를 무시할 수 있게 해줍니다. 지금까지는 사용 가능한 콘텐츠 양이 콘텐츠의 경제성에 따라 통제가 되는 시대였기 때문에 필터가 별로 힘을 못 썼습니다."
           "저널리즘의 역할은 예나 지금이나 결국 잡음 속에서 신호를 찾아내는 일이고, 여기에는 인간과 기계가 둘 다 필요하다."]}
 {:source "리팩토링(Refactoring)"
  :quotes ["컴퓨터가 이해할 수 있는 코드는 어느 바보나 다 짤 수 있다. 좋은 프로그래머는 사람이 이해할 수 있는 코드를 짠다."
           "두 가지 구별된 작업(기능 추가와 리팩토링)을 위해 시간을 나누어야 한다. 기능을 추가할 때는 기존 코드를 건드려서는 안 되고 단지 새로운 기능만 추가해야 한다. 기능을 추가할 때는 기존 코드를 건드려서는 안 되고 단지 새로운 기능만 추가해야 한다."
           "'나는 훌륭한 프로그래머는 아니다. 그냥 훌륭한 습관을 가지고 있는 좋은 프로그래머이다.' - Kent Beck"
           "대부분의 경우, 나는 리팩토링을 위해 별도의 시간을 내는 것에 반대한다. 내가 보기에 리팩토링은 별도의 시간을 내서 할 것이 아니라, 틈틈이 계속 해야 하는 것이다. 리팩토링 자체를 목적으로 삼는 것이 아니라, 어떤 다른 것을 하기 위해 리팩토링을 하는 것이고, 리팩토링은 그 다른 것을 하는 데 도움을 준다."
           "리팩토링은 버그를 수정할 때 코드를 좀 더 쉽게 이해하기 위해서 사용된다. 어떤 코드를 이해하려고 할 때, 더 깊은 이해를 위해 리팩토링을 한다. 종종 이런 적극적인 프로세스는 버그를 찾는데 도움을 준다."
           "버그 리포트를 받으면, 그것은 리팩토링이 필요하다는 신호인데, 왜냐하면 버그가 있었다는 것을 몰랐을 정도로 코드가 명확하지 않았다는 뜻이기 때문이다."
           "컴퓨터 과학은 간접(indirection) 계층을 한 단계 더 만들면 모든 문제를 풀 수 있다고 믿는 학문이다. - Dennis DeBruler"
           "리팩토링을 하는 경우 강조점이 바뀐다. 여전히 사전 디자인(upfront design)은 필요하지만, 궁극적인 솔루션을 찾으려 할 필요는 없다. 그대신 필요한 것은 적절한 솔루션이다."
           "리팩토링은 확실히 소프트웨어를 더 느리게 할 것이지만, 반면에 소프트웨어에 대한 퍼포먼스 튜닝을 더 쉽게 할 수 있도록 만든다. 엄밀한 실시간 환경을 제외한 모든 영역에서, 빠른 소프트웨어를 만드는 비결은 먼저 튜닝할 수 있는 소프트웨어를 만들고, 그 다음에 충분한 속도를 얻을 수 있도록 튜닝하는 것이다."
           "리팩토링을 하는 동안 단기적으로는 소프트웨어를 느리게 하지만, 최적화 단계에서는 소프트웨어를 튜닝하는 것을 더 쉽게 한다. 결국에는 이익이 된다."
           "주석을 써서는 안 된다는 말을 하는 것은 아니니 걱정하지는 말라. 우리의 후각에 의하면 주석이 나쁜 냄새는 아니다. 사실은 달콤한 향기다. 여기서 주석에 대해 말하는 이유는 주석이 종종 탈취제로 사용되기 때문이다. 주석이 잔뜩 붙어 있는 코드를 보면 코드가 서투르기 때문에 주석이 있는 경우가 얼마나 많은가?"
           "패턴과 리팩토링에는 자연스러운 관계가 있다. 패턴은 우리가 있고 싶은 곳이고, 리팩토링은 그곳에 이르는 방법이다."
           "객체 디자인에서 가장 기본이 되는 것 중의 하나는 책임을 어디에 둘 지를 결정하는 것이다."
           "내가 수 년간에 걸쳐 사용한 가장 가치 있는 관례(convention) 가운데 하나는 상태를 바꾸는 메소드(수정자)와 상태를 묻는 메소드(질의)를 분리하는 것이다."]}
 {:source "소프트웨어 개발의 지혜"
  :quotes ["풍족한 세상에서, 점점 더 부족해지고 있는 유일한 것은 사람들의 주의력이다. - 와이어드(Wired)지에서, 캐빈 캘리(Kevin Kelly)"
           "읽기 쉽고 변경하기 쉬운 모듈을 만들기 위해서는 단순한 원칙과 패턴 이상의 그 무엇이 필요한데, 바로 주의력과 훈련이다. 그리고 미를 창조하기 위한 열정이 필요하다."
           "소프트웨어 개발 생명주기를 검토한 후, 나는 공학 설계의 기준을 실제로 만족시킬 유일한 소프트웨어 문서는 소스 코드 목록뿐임을 알 수 있었다. - 잭 리브스(Jack Reeves)"
           "애자일 설계란 무엇인가? 애자일 설계는 과정이지, 결과가 아니다. 이것은 원칙, 패턴, 그리고 소프트웨어의 구조와 가독성을 향상시키기 위한 방식의 연속적인 작용이다. 모든 시점에 시스템의 설계를 가능한 간단, 명료하고, 표현적으로 유지하려는 노력이다."
           "SRP의 맥락에서, 우리는 책임(responsibility)을 '변경을 위한 이유'로 정의한다. 만약 여러분이 한 클래스를 변경하기 위한 한 가지 이상의 이유를 생각할 수 있다면, 그 클래스는 한 가지 이상의 책임을 맡고 있는 것이다."
           "오히려, 이들을 분리하는 것은 불필요한 복잡성이란 악취를 풍기게 할 것이다. ... 변경의 축은 변경이 실제로 일어날 때만 변경의 축이다. 아무 증상도 없을 때, 이 문제에 SRP를 적용하는 것이나 다른 원칙을 적용하는 것은 현명하지 못하다."
           "소프트웨어에서 불필요한 복잡성의 부하를 없애려면, 우리 자신이 한 번은 놀림 받을 각오를 해야 할지도 모른다. 이것은 처음에는 코드가 변경되지 않을 것이라 생각하고 작성한다는 것을 의미한다. 변경이 일어나면, 나중에 일어날 그런 종류의 변경에 대해 보호하는 추상화를 구현한다. 즉, 첫 번째 총알은 그냥 맞고, 그 총으로 쏘는 다른 총알에 대해서는 확실히 보호한다는 것이다."
           "LSP 위반은 대개, OCP를 심각하게 위반하는 런타임 타입 정보 (RTTI, Run-Time Type Information) 사용으로 이어진다."
           "LSP는 '고립적으로 본 모델은 의미 있게 검증하는 것이 불가능하다'라는 아주 중요한 결론으로 이끈다. 어떤 모델의 유효성(validity)은 오직 그 클라이언트의 관점에서만 표현될 수 있다."
           "의존성은 이행적(transitive)이다."
           "여기에서의 역전은 의존성에 대한 것만 말하는 것이 아니라, 인터페이스 소유권에 대한 것도 의미한다는 사실을 명심하자. 우리는 대개 유틸리티 라이브러리가 그것의 고유 인터페이스를 소유한 것으로 생각 하지만 DIP가 적용된 경우에는 클라이언트가 추상 인터페이스를 소유하는 경향이 있다."
           "경험상의 규칙: 어떤 것이 영리하고 정교하다고 생각된다면, 조심해라. 이런 생각은 여러분의 방종일 가능성이 크다. - 도널드 A. 노먼(Donald A. Norman)"
           "인터페이스는 그 인터페이스의 파생 클래스나 파생 인터페이스가 아니라 클라이언트에 속한다. 인터페이스와 그 파생형 사이의 논리적인 구속력보다 클라이언트와 인터페이스 사이의 논리적인 구속력이 더 강하다."]}
 {:source "아웃라이어"
  :quotes ["우리가 성공에 대해 알고 있는 것은 전부 틀렸다!"
           "우리는 무에서 유를 창조하지 않는다. 우리는 부모와 후견인에게 뭔가를 빚진다. ... 언제 어디에서 성장했느냐의 문제는 큰 차이를 만든다. 우리가 속한 문화와 선조로부터 물려받은 것은 성취의 방향을 결정한다."
           "결과적으로 스무 살이 되면 엘리트 학생은 모두 1만 시간을 연습하게 된다. 반면 그냥 잘하는 학생은 모두 8,000시간, 미래의 음악교사는 4,000시간을 연습한다."
           "복잡한 업무를 수행하는 데 필요한 탁월성을 얻으려면, 최소한의 연습량을 확보하는 것이 결정적이라는 사실은 수많은 연구를 통해 거듭 확인되고 있다. 사실 연구자들은 진정한 전문가가 되기 위해 필요한 '매직넘버'에 수긍하고 있다. 그것은 바로 1만 시간이다."
           "한 소년의 높은 IQ는 수많은 영리한 소년과 만났을 때 거의 도움이 되지 않는다."
           "스턴버그에 따르면 실용 지능(practical intelligence)은 '뭔가를 누구에게 말해야 할지, 언제 말해야 할지, 어떻게 말해야 최대의 효과를 거둘 수 있을지 등을 아는 것'을 포함한다."
           "그들은 세계적인 성공을 거두겠다는 희망 따위도 없이 앞날이 뚜렷하지 않은 분야를 선택했다. 하지만 그들이 선택한 분야에서 그야말로 붐이 일어났고, 그들은 이미 1만 시간의 훈련을 치른 다음이었다. 그들은 완벽하게 준비가 되어 있었다."
           "성공이 다양한 기회의 조합으로 이루어져 있다는 사실을 알게 되었다. 지금까지 살펴본 바로는 언제 어디에서 태어났는가, 부모의 직업은 무엇인가, 양육되는 과정에서 어떤 교육을 받았는가 등의 요인에 따라 누군가가 세상 속에서 얼마나 잘 해나갈 수 있는가가 결정된다."
           "문화적 유산의 힘은 강력하며 뿌리 깊게 박혀 있어 오래도록 지속된다. 또한 문화적 유산은 세대를 넘어 지속되는 것은 물론 그것을 탄생시킨 경제적, 사회적 배경이 소멸된 이후에도 살아남는다. 나아가 우리가 세계를 이해하는 방식을 결정함으로써 우리의 태도와 행동을 결정한다."
           "1년 내내 해뜨기 전에 일어날 수 있다면 어찌 부자가 못 되리"]}
 {:source "수학자, 컴퓨터를 만들다(The Universal Computer)"
  :quotes ["오늘날, 컴퓨터 기술이 엄청나게 빠른 속도로 진보하고, 공학자들의 진정으로 뛰어난 업적에 감탄하는 이때에, 정작 그 모든 것을 가능하게 만든 논리학자들의 생각은 너무나 쉽게 간과되어 버린다. 이 책은 그들의 이야기를 하고자 한다."
           "그의 해법은 개념 표기법을 문법, 또는 이를테면 구문론이라는 엄격하게 정밀한 규칙을 가진 인공 언어로 발전시키는 것이었다. 이를 통해 논리적 추론을 기호들이 배열된 방식에만 관련 있는 순수하게 기계적인 조작. 이른바 추론 규칙으로 나타내는 것이 가능하게 되었다. ... 개념 표기법은 오늘날 일반적으로 사용되는 모든 컴퓨터 프로그래밍 언어의 선조였다."
           "폰 노이만은 컴퓨터 프로그래밍을 '코딩(coding)'이라고 불렀고 지적 능력이 거의 필요하지 않은 사무적인 일이라고 생각한다는 점을 분명히 했다. "]}
 {:source "xUnit 테스트 패턴"
  :quotes ["래즈베리 쨈의 법칙 : 넓게 바를수록 얇게 퍼진다. - 제리 와인버그 (Jerry Weinberg)"
           "모방은 상대방에 대한 최고의 찬사다."
           "목욕물을 버리면서 아이까지 함께 버리지 말자."
           "새 망치가 생기면 전부 못으로 보인다!"]}
 {:source "코드 크래프트"
  :quotes ["편지가 길어서 죄송합니다. 짧게 쓸 시간이 없었습니다."]}
 {:source "미래를 만든 Geeks"
  :quotes ["미래를 예측하는 방법은 미래를 만드는 것이다. - 엘런 케이"
           "현실 왜곡장. 잡스가 있는 자리에서는 현실이 이리저리 변해. 잡스는 사실상 누구에게나 거의 무엇이든 납득시킬 수 있어. 잡스가 주위에 없으면 현실 왜곡장은 차츰 사라지지만 현실적인 일정으로 만들기는 어려워."
           "내가 본다니까! 보드가 케이스 안에 있어도 최대한 아름다워야 해. 훌륭한 목수는 아무도 보지 않는다고 해도 장식장 뒷면에 형편없는 나무를 쓰지 않아."
           "최적화 마무리 손질을 끝내자 처음으로 관리 양식을 채워 넣을 시간이 됐다. 코드 줄을 쓰는 부분에 이르자 빌은 잠시 생각하고 나서 -2000이라는 숫자를 적어 넣었다."
           "남은 일생 동안 아이들에게 설탕물이나 팔 건가요, 아니면 세상을 바꿀 기회를 붙잡고 싶은가요?"
           "나는 버렐이 하는 일에 모두 어떻게 그토록 성공적인지 깨닫기 시작했다. 높은 성취를 거둔 사람들처럼 버렐은 도전을 무척 즐겨서 실제로 도전을 추구하거나 의식적으로 도전거리를 만들었다. 버렐은 자기 삶 전체에서 도전하는 상황을 과감히 만들었다. 고의로 '엉망으로 만들어 보는 건' 어떨까? 그러면 정말 '싹 치울 수 있게'될지도 모른다!"]}
 {:source "실용주의 프로그래머"
  :quotes ["우리가 단지 돌을 자를지라도 언제나 대성당을 마음속에 그려야 한다. - 채석장 일꾼의 신조"
           "실용주의 프로그래머는 무엇이 다른가? 우리는 태도와 스타일 그리고 문제와 해법에 접근하는 철학에 차이가 있다고 생각한다. 그들은 직면한 문제 너머를 생각하며, 문제를 항상 더 큰 맥락에 놓으려 노력하고, 항상 더 큰 그림을 보려 한다. 어쨌건 이런 더 큰 맥락 없이 도대체 어떻게 실용적일 수 있겠는가? 어떻게 똑똑한 절충안을 내고, 정확한 사실에 근거한 결정을 내릴 수 있겠는가?"
           "허락을 얻는 것보다 용서를 구하는 것이 더 쉽다. - 그레이스 호퍼"
           "지식에 대한 투자가 언제나 최고의 이윤을 낸다. - 벤자민 프랭클린"
           "결정이 돌에 새겨지는 것이라 가정하고, 발생할지도 모를 우연한 사건들에 대해 준비하지 않는 데에서 실수가 나온다. 결정이 돌에 새겨진 것이 아니라 해변가의 모래 위에 쓰인 글씨라 생각해 보자. 언제든지 큰 파도가 글씨를 지워버릴 수 있다."
           "프로토타이핑은 학습 경험이며, 프로토타입의 가치는 생성된 코드에 있는 것이 아니라 이를 통해 배우게 되는 교훈에 있다. 이것이 프로토타이핑의 진정한 핵심이다."
           "언어의 한계가 곧 자기 세계의 한계다. - 루트비히 비트겐슈타인"
           "GUI의 장점은 WYSIWYG(What You See Is What You Get), 즉 여러분이 보는 것이 여러분이 얻는 것이라는 것이다. 단점은 WYSIAYG(What You See Is All You Get)"
           "리팩터링을 하지 않는 핑계로 자주 사용되는 이유가 일정의 압박이다. 하지만 이것은 설득력 있는 이유가 되지 못한다. 지금 리팩터링을 하지 않으면, 일이 더 진척되었을 때, 곧 신경 써야 할 의존성이 더 많이 생겼을 때 문제를 고치기 위해 훨씬 더 많은 시간을 투자해야 한다. 그때가 되면 일정에 더 여유가 생길까? 우리의 경험에 비추어 봤을 때 그런 일은 없다."
           "우리는 단위 테스트를 계약을 잘 지키는지 보는 테스트로 생각하길 좋아한다."]}
 {:source "맨먼스 미신"
  :quotes ["업무의 크기를 측정하는 단위로 맨먼스를 쓰는 것은 위험하고 속기 쉬운 허구다. 그것은 인력과 기간은 상호 교환 가능하다는 의미를 내포한다."
           "몇 명의 여성이 임신하든 사람의 임신 기간은 9개월이다."
           "브룩스의 법칙(Brook's Law) : 일정이 늦어진 소프트웨어 프로젝트에 인력을 추가하는 것은 일정을 더욱 늦추는 결과를 낳을 뿐이다."
           "이번 연구를 통해, 능력이 뛰어난 사람과 부족한 사람은 종종 최대 10배까지 현격한 개인적인 능력 차이를 보인다는 점이 밝혀졌다. - 색맨, 애릭슨, 그랜트"
           "창작 작업을 하는 사람들에게 강요되는 규칙이나 원칙에 대한 아이디어는 무엇이든 처음엔 도움보다는 방해가 되는 것처럼 보인다. 하지만 실제에서는 전혀 그렇지 않다. 규율에 통제받는 사고는 잠깐 영감을 주는 것이 아니라 영감에 집중할 수 있게 해준다. from 디자인의 디자인(The Design of Design), 글렉"
           "경험은 소중한 스승이다. 하지만 경험에서만 배우려는 사람은 바보다. from 가난한 리처드의 연감, 벤저민 프랭클린"]}
 {:source "지속적인 통합"
  :quotes ["자동화되고 지속적인 테스트가 구비되어 있지 않은 CI는 CI가 아니라고 생각하는 사람이 많습니다. 전적으로 동의합니다."
           "우리는 30쪽짜리 표준 문서를 작성하는 대신, 한쪽 짜리 어노테이션달린 클래스를 만들어 코딩 표준을 모두 담게 했습니다."
           "기술을 갈고 닦고자 하는 장인이라면 우선 도구부터 갈아야 한다. - 중국 속담"]}
 {:source "실용주의 사고와 학습"
  :quotes ["드라이퍼스 모델의 가장 중요한 교훈은 초보자들에게는 상황에 무관한 규칙이 필요하지만 전문가들은 맥락에 의존적인 직관을 사용한다는 것입니다."
           "맥락에서 떨어진 객관성, 즉 무언가를 맥락에서 떼어놓고 객관적이려고 하는 것은 그 자체로 위험을 내재합니다. 예를 들어, 앞서 언급한 스타인백의 인용구처럼 연구용으로 해부한 것일지도 모르는 보존된 물고기와 은빛으로 반짝이면서 파도를 타고 넘는 물고기는 완전히 다릅니다."
           "우리는 지금보다 더 R 모드를 많이 사용하고자 합니다. 왜냐하면 R 모드는 직관을 주고 우리가 그토록 열망하는 전문가가 되기 위해서 필요한 것들을 주기 때문입니다. R 모드 없이 전문가가 될 수는 없습니다. 드라이퍼스 모델은 전문가의 암묵지를 강조합니다. 그리고 그것은 R 모드에 있습니다. 전문가는 패턴을 보고 식별합니다. 여기도 패턴 매칭이 있는 것입니다."
           "창조성은 작품을 만들어 내기 위해 선택하고 적절한 구성 요소를 제대로 조합하는 데서 나옵니다. 그리고 선택, 곧 어떤 맥락에서 무엇을 선택해야 하는지를 아는 것은 '패턴 매칭'에서 나오며 이것은 우리가 계속 이야기해왔던 주제입니다."
           "취중에 글을 쓰고, 맑은 정신으로 퇴고하라"
           "이곳에서 창의성이 새로운 아이디어를 탄생시키죠. L 모드와 R 모드는 메타포(metaphor)안에서 만납니다. 유추를 만들어내는 것입니다. '메타포는 언어화와 이미지의 공통 기반이며 의식과 무의식, 오른쪽 뇌 반구와 왼쪽 뇌 반구를 넘나드는 여행 방법이다.'"
           "'모닝 페이지 기법을 얘기하면서' 그건 아마도 아무 보호막 없이 뇌의 덤프를 뜨기 때문일 것입니다. 아침에 처음 떠오르는 것은 생각보다 의식이 완전히 깨지 않은 상태에서 떠오른 것입니다. 무의식이 여전히 중요한 역할을 하는 것이죠. 방어막을 켜거나 제한된 현실세계에 적응하기 전입니다. 아주 잠깐이나마 R 모드를 그대로 쓰기 좋을 때죠."
           "괄호의 위치도 시각적인 패턴을 만듭니다. 그래서 중괄호({})를 사용하는 언어에서는 괄호를 놓는 위치를 가지고 오랫동안 처절하게 싸웠습니다. 그들이 쓸데없이 싸운 것은 아닙니다. 이런 종류의 패턴 매칭은 인지에 영향을 줍니다."
           "'필요는 발명의 어머니이고, 놀이는 발명의 아버지다. from 로저 폰 외흐'"
           "가장 흐릿한 글씨라도 최고의 기억보다 낫다. from 중국속담"
           "'정신은 그 자체로 지옥의 천국을 만들 수도, 천국의 지옥을 만들 수도 있습니다.' from 존 밀튼, 낙원은 사라졌다."
           "'우리가 증명할 수 있는 것은 논리가 있기 때문이고 우리가 발견할 수 있는 것은 직관이 있기 때문이다.' from 앙리 푸앵카레"
           "많은 HR은 아직 잘 모르고 있지만 사실 자바, 루비, .NET, 혹은 아이폰 SDK를 아는지 모르는지는 별로 중요하지 않습니다. 배워야 할 신기술이나 예전 기술의 새 버전은 끊임없이 등장합니다. 기술 자체는 별로 중요하지 않습니다. 중요한 것은 지속적으로 배우는 것입니다."
           "'어디로 가고 있는지 모른다면 조심해야 한다. 그곳에는 도달하지 못할 테니까.' from 요기 베라"
           "여기서는 SMART는 Specific(구체적인), Measurable(측정 가능한), Achievable(달성할 수 있는), Relevant(당면 과제에 적절한), Time-boxed(시간 제한이 있는)를 나타냅니다. ... 각 목표는 SMART를 만족시켜야 합니다."
           "'소설을 쓰는 것은 한밤중에 운전을 하는 것과 비슷합니다. 전조등이 비추는 범위까지만 볼 수 있지만 어쨌든 목적지에는 갈 수 있습니다.' from E.L. 닥터로우"
           "'~할 시간을 내기'라는 표현은 잘못된 표현입니다. 시간은 만들 수도, 없앨 수도 없는 것입니다. 시간은 오로지 할당할 수 있을 뿐입니다."
           "만들기 위해 배우지 말고 배우기 위해 만들어라."
           "유사성에서 배우고, 차이점에서 배운 것을 버려라."
           "이너게임 시리즈는 이 생각을 다음과 같은 문구로 요약합니다. '시도하고 실패하라, 자신의 인지가 교정해줄 것이다.'"]}
 {:source "드리밍 인 코드"
  :quotes ["리팩토링은 종종 정원 관리에 비유되곤 한다. 즉 리팩토링 작업에 완료란 없다."
           "호프스태터의 법칙 : 프로젝트는 당신의 예상보다 언제나 더 오래 걸릴 것입니다. 당신이 호프스태터의 법칙을 염두에 둔다 해도 말입니다."]}
 {:source "소프트웨어 아키텍트가 알아야 할 97가지"
  :quotes ["만일 소통이 '왕'이라면 명확성과 리더쉽은 소통을 위해 반드시 수반되어야 하는 '신하'입니다."
           "요구되는 기능이나 요구사항에서 의도하고 있는 가치를 질문함으로써, 아키텍트는 실질적인 문제에 집중하고, 잘되면, 고객이 말한 것보다 더 좋고 비용이 적게 드는 해결책을 제시할 수 있습니다."
           "일어서는 행위는 무의식적으로 권위와 자신감을 갖고 대화를 나누게 합니다. 회의실을 지배하십시오."
           "추측을 통한 일반화보다는 경험을 통한 단순화가 더 낫습니다."
           "기술 채무(technical debt)를 갚아라."
           "만약 개발자들이 그들의 경험적 지식을 활용하는 능력을 알고 싶다면 다음과 같이 질문해 보세요. '만약 가장 최근에 진행했던 프로젝트를 다시 처음부터 시작한다면 무엇을 바꿔보고 싶은지요?'"
           "최종사용자에게는 인터페이스가 시스템이다."]}
 {:source "WRITING SOLID CODE"
  :quotes ["버그는 절대로 '자살'하는 법이 없지."]}
 {:source "위대한 게임의 탄생"
  :quotes ["퀘스트의 핵심은 플레이어들이 금방 깰 수 있도록 길이가 적당하면서 보상도 받을 수 있는 임무를 제공하는 것입니다. '딱 하나만 더 해볼까'라는 느낌을 주고 싶었지요. - wow"
           "데이터-분석 툴이 필요하다는 걸 좀 더 빨리 알았어야 했다. - wow"
           "기술과 창조성이 섞여 있는 게임 산업에서는 각 그룹에게 자신이 원하는 목표를 추구할 수 있는 능력(과 책임)을 쥐어 줄 때 결과가 좋은 경우가 많습니다. 패스트푸드 체인점처럼 똑같은 제품을 계속해서 찍어 내는 게 목표라면, Cabal 같은 시스템은 별로 의미가 없습니다. - hf2"
           "우리는 계속해서 변화하는 제한사항과 요구사항 사이에서 혁신, 게임의 품질, 흥미로운 게임 플레이의 균형을 맞추기 위해 노력하고 있습니다. Cabal 시스템은 우리가 원하는 목표로 다가가는 데 효과적이었습니다. - hl2"
           "이런 반복 개발은 우리가 Half-Life 1을 개발하면서 깨닫게 된 '프로젝트에서는 시간이 지날수록 게임을 더 잘 이해하기 때문에 나중에 한 결정일수록 먼저 한 결정보다 낫다'라는 교훈을 활용하는 것입니다. 나중에 한 결정에 '더 힘을 실어 주게' 되면, 게임 플레이가 전반적으로 훨씬 향상됩니다. - hl2"
           "우리 게임 디자인에서(중력총같이) 혁신적인 부분은 수많은 반복 개발과 플레이테스트의 결과지, 모여 앉아 뭐가 재미있을까 하는 고민만으로 나온 게 아닙니다. - hl2"
           "멀티플레이로 게임을 해 본 경험은 개발팀이 핵심/보조 메커니즘을 다시 손보게 했고, 덕분에 전반적인 게임 플레이가 좋아졌다고 한다. - uncharted2"
           "개발팀이 프로토타이핑 결과에 과도하게 애착을 느낀 나머지 이를 게임에 추가하기 위해 살을 붙이고 다듬는 데 얼마나 걸릴지를 과소평가하기 쉽다고 한다. - uncharted2"
           "프로토타이핑이라는 사이렌의 유혹 - uncharted2"
           "거대한 슈퍼컴퓨터 시스템 연산 시간과 2기가비트 인터넷 연결을 대여해 동시접속자가 10만 명이 넘는 상황에서 다양한 시나리오로 서버를 공격하는 시뮬레이션을 진행했습니다. - rockband"
           "가장 중요한 점은 뭐가 어떻게 돌아가는지를 알 수 있도록 애플리케이션을 출시하기 전에 측정, 분석용 코드를 꼭 집어넣어야 한다는 점입니다. Farmville의 경험 덕분에, 이제 Zynga는 측정팀과 전체 통계 분석팀이 따로 있고 여기에서 모든 개발팀에게 서비스를 제공합니다. Zynga는 측정값에 따라 개발을 주도하는 회사입니다. - farmville"
           "bejeweled twist를 개발하면서 알게 된 또 다른 결론은 (앞으로 PopCap에서 다른 게임을 만들 때도 고려할 점인데), 캐주얼 유저는 도움말을 어떻게 만들든 절대로 읽지 않는다는 점이다. - bejeweled twist"
           "여러 게임 개발팀의 공통된 문제점은 전혀 소리를 듣지 않는 채 게임을 테스트한다는 점입니다. - madden NFL 10"
           "요즘 나오는 게임들은 실사같은 ;그래픽 스타일'을 추구한다고 하지만, 그런 게임을 실제로 해 보면 그냥 그래픽이 실사 같을 뿐이지, 전혀 스타일이라고는 찾아볼 수 없습니다. - 직군 인터뷰 : 아트 디렉터"
           "전통적으로, 많은 게임 개발팀들이 NIH(Not Invented Here : 우리가 직접 개발한 게 아니잖아) 신드롬으로 고생해왔다. - 공통점 : 잘된 점"
           "개발 중인 게임을 점심시간에 회사 사람들에게 최대한 많이 선보이면 결과적으로 품질을 전반적으로 상당히 높일 수 있다. 게임 개발 역사를 통틀어 얼마나 많은 것을 피자와 맞바꾸었는지 알게 되면 놀랄 것이다. - 공통점 : 잘된 점"
           "'우리 플레이 테스터들은 왜 이렇게 우리 게임을 잘 못하는거지? 그냥 저 사람들이 못하는 게 아닐까?' - 공통점 : 잘못된 점들"
           "망한 프로젝트가 있다면 얘기해 보세요. 어떤 일이 있었나요? 당신이 담당자라면 어떻게 다르게 했을까요? - 성공을 위한 구인과 인간관리"
           "여기에서 나올 수 있는 문제점 중 하나가 임금 압축(salary compression) 현상이다. 처음에는 파격적인 연봉으로 사람들을 뽑지만, 팀에 들어가서 좀 지나고 나면 회사를 옮기지 않을 것이라는 점을 이용해서 다른 회사에서 같은 직위의 사람에게 주는 연봉보다 연봉 인상을 적게 하는 경우가 많다. - 성공을 위한 구인과 인간관리"]}
 {:source "도메인 주도 설계"
  :quotes ["도메인 주도 설계는 복잡한 도메인을 다뤄야 하는 소프트웨어 프로젝트에 박차를 가하는 것을 목표로 삼는 사고방식이자 우선순위의 모음이다."
           "프로젝트에서 사용하는 언어가 분열되면 심각한 문제가 발생한다. 도메인 전문가는 자신의 전문 용어를 사용하고 기술적인 업무를 맡은 팀원들은 설계 측면에서 도메인에 관한 토론에 적합한 자신들만의 언어를 사용한다."
           "이 책의 요점은 하나의 모델이 구현, 설계, 의사소통의 기초가 돼야 한다는 것이다. 이러한 각 목적에 각기 다른 모델을 갖추는 것은 바람직하지 않다."
           "모델이 드러나면 사용자가 소프트웨어의 잠재력을 좀더 많이 접하게 되어 일관성 있고 예상 가능한 행위가 나타날 것이다."
           "MODEL-DRIVEN DESIGN에서 코드는 모델의 한 표현으로 볼 수 있다. 코드를 변경하는 것이 곧 모델의 변경에 해당한다. 누가 좋아하건 말건 프로그래머가 곧 모델러다. 그러므로 프로그래머가 훌륭한 모델링 업무를 할 수 있게 프로젝트를 구성하는 것이 바람직하다."
           "도메인 주도 설계는 모델을 동작하게 만들어 애플리케이션의 문제를 해결한다. 지식탐구를 바탕으로 팀은 혼란스러운 정보의 거센 흐름 속에서 정수를 추출해 실제적인 모델로 만든다. MODEL-DRIVEN DESIGN은 모델과 구현을 매우 밀접하게 연결한다. UBIQUITOUS LANGUAGE는 개발자와 도메인 전문가, 소프트웨어 사이에 흐르는 모든 정보의 통로에 해당한다."
           "이 책에서 제시하는 설계 방식은 대부분 '책임 주도 설계(responsibility-driven design)' 원칙을 따른다."
           "어떤 프로젝트에서는 사용자 인터페이스와 애플리케이션 계층을 명확히 구분하지 않기도 하며, 여러 개의 인프라스트럭처 계층이 존재하는 프로젝트도 있다. 하지만 MODEL-DRIVEN DESIGN을 가능케 하는 것은 결정적으로 도메인 계층을 분리하는 데 있다."
           "아키텍처에서 응집력 있는 도메인 설계가 시스템의 다른 부분과 느슨하게 결합될 수 있게 도메인 관련 코드를 격리한다면 아마 그러한 아키텍처는 도메인 주도 설계를 지원할 수 있을 것이다."
           "수많은 객체는 본질적으로 해당 객체의 속성이 아닌 연속성과 식별성이 이어지느냐를 기준으로 정의된다."
           "개념적 식별성이 없는 객체도 많은데, 이러한 객체는 사물의 어떤 특징을 묘사한다."
           "모델에 포함된 어떤 요소의 속성에만 관심이 있다면 그것을 VALUE OBJECT로 분류하라. VALUE OBJECT에서 해당 VALUE OBJECT가 전하는 속성의 의미를 표현하게 하고 관련 기능을 부여하라. 또한 VALUE OBJECT는 불변적(immutable)으로 다뤄라. VALUE OBJECT에는 아무런 식별성도 부여하지 말고 ENTITY를 유지하는 데 필요한 설계상의 복잡성을 피하라."
           "설계가 매우 명확하고 실용적이더라도 개념적으로 어떠한 객체에도 속하지 않는 연산이 포함될 때가 있다. 이러한 문제를 억지로 해결하려 하기보다는 문제 자체의 면면에 따라 SERVICE를 모델에 명시적으로 포함할 수 있다."
           "도메인의 중대한 프로세스나 변환 과정이 ENTITY나 VALUE OBJECT의 고유한 책임이 아니라면 연산을 SERVICE로 선언되는 독립 인터페이스로 모델에 추가하라. 모델의 언어라는 측면에서 인터페이스를 정의하고 연산의 이름을 UBIQUITOUS LANGUAGE의 일부가 되게끔 구성하라. SERVICE는 상태를 갖지 않게 만들어라."
           "기술적으로 고려해야 할 여러 사항이 있겠지만 모듈화하는 가장 주된 이유는 바로 인지적 과부하(cognitive overload) 때문이다."
           "MODULE로 쪼개지는 것은 코드가 아닌 바로 개념이다."
           "모델 내에서 복잡한 연관관계를 맺는 객체를 대상으로 변경의 일관성을 보장하기란 쉽지 않다. 그 까닭은 단지 개별 객체만이 아닌 서로 밀접한 관계에 있는 객체 집합에도 불변식이 적용돼야 하기 때문이다."
           "루트를 경유하지 않고는 AGGREGATE의 내부를 변경할 수 없다. 이런 식으로 AGGREGATE의 각 요소를 배치하면 AGGREGATE 안의 객체와 전체로서의 AGGREGATE의 상태를 변경할 때 모든 불변식을 효과적으로 이행할 수 있다."
           "도메인 주도 설계의 목표는 기술보다는 도메인에 대한 모델에 집중해 더 나은 소프트웨어를 만들어내는 것이다."
           "클라이언트는 이미 존재하는 도메인 객체의 참조를 획득하는 실용적인 수단을 필요로 한다. ... 한편으로는 AGGREGATE 루트에서부터 순회하지 않고 정확히 필요한 데이터를 데이터베이스에서 뽑아내거나 몇 가지 특정한 객체를 가져오는 데 질의를 사용할 수도 있다. 도메인 로직은 질의와 클라이언트 코드로 들어가고, ENTITY와 VALUE OBJECT는 그저 데이터 컨테이너로 전락한다. 대부분의 데이터 접근 인프라스트럭처를 적용하는 데 따르는 급격한 기술적 복잡성으로 클라이언트 코드는 금방 복잡해지고, 이는 도메인 계층에 대한 개발자들의 이해 수준을 낮춰 모델을 도메인 계층과 동떨어진 것으로 만든다."
           "이 경우 REPOSITORY가 데이터를 근거로 객체를 생성하므로 많은 이들이 REPOSITORY를 FACTORY로 생각하는데, 사실 기술적 관점에서는 그렇다고 볼 수 있다. 그러나 모델을 중심에 두는 것이 더 유용하며, 앞에서 언급한 것처럼 저장된 객체를 재구성하는 것이 새로운 개념적 객체를 생성하는 것은 아니다. 설계를 이러한 도메인 주도 관점에서 보면 FACTORY와 REPOSITORY의 책임이 뚜렷이 구분되는데, FACTORY가 새로운 객체를 만들어 내는 데 반해 REPOSITORY는 기존 객체를 찾아낸다."
           "리팩터링의 효과는 선형적으로 증가하지 않는다."
           "도메인 전문가가 사용하는 언어에 귀 기울여라. 복잡하게 뒤얽힌 개념들을 간결하게 표현하는 용어가 있는가? 여러분이 선택한 단어를 (아마도 더 적절하게) 고쳐주는가? 여러분이 특정 문구를 이야기할 때 도메인 전문가의 얼굴에서 곤혹스러운 표정이 사라지는가? 이 모두가 바로 모델에 기여하는 개념의 실마리에 해당한다."
           "제약조건(constraint)은 특별히 중요한 범주의 모델 개념을 형성한다. 흔히 제약조건은 암시적인 상태로 존재하며, 이를 명시적으로 표현하면 설계를 대폭 개선할 수 있다."
           "수행 방법에 관해서는 언급하지 말고 결과와 목적만을 표현하도록 클래스와 연산의 이름을 부여하라. 이렇게 하면 클라이언트 개발자가 내부를 이해해야 할 필요성이 줄어든다."
           "계속적인 리팩터링을 토대로 변경되는 부분과 변경되지 않는 부분을 나누는 중심 축을 식별하고, 변경을 분리하기 위한 패턴을 명확하게 표현하는 CONCEPTUAL CONTOUR를 찾아라. 우선적으로 확실한 지식 영역을 구성하는 도메인의 일관성 있는 측면과 모델을 조화시켜라."
           "MODULE 내에서조차 의존성이 증가할수록 설계를 파악하는 데 따르는 어려움이 가파르게 높아진다. 이는 개발자에게 정신적 과부하(mental overload)를 줘서 개발자가 다룰 수 있는 설계의 복잡도를 제한한다. 아울러 명시적인 참조에 비해 암시적인 개념이 훨씬 더 많은 정신적 과부하를 초래한다."
           "정제된 설계에서 흔히 볼 수 있는 일반적인 실천지침으로 'CLOSURE OF OPERATION'이 있다. 이 명칭은 가장 정교한 개념체계인 수학에서 유래한 것이다. 1 + 1 = 2와 같은 덧셈 연산은 실수 집합에 대해 닫혀 있다. ... 하지만 닫힘은 소프트웨어 설계에서도 매우 광범위하게 사용되는 기법이다. 하나의 XML 문서를 다른 XML 문서로 변환할 때 XSLT를 사용하곤 한다. XSLT 연산은 XML 문서 집합에 대해 닫혀 있다. 닫힘의 특성 덕분에 연산을 간단하게 해석할 수 있고 닫힌 연산을 연결하거나 결합하는 것에 관해 쉽게 생각할 수 있다."
           "도메인 주도 설계에서 디자인 패턴을 활용하려면 동시에 두 가지 수준에서 패턴을 바라봐야만 한다. 한 가지 수준은 코드 내에 포함된 기술적인 측면을 다루는 디자인 패턴이다. 다른 수준은 모델 내에 포함된 개념 패턴이다."
           "각 용어가 모호하지 않고 모순되는 규칙이 없는 모델의 내적 일관성을 단일화(unification)라 한다."
           "디스틸레이션(distillation)은 혼합된 요소를 분리해서 본질을 좀더 값지고 유용한 형태로 뽑아내는 과정이다. 모델은 지식의 정수를 추출한 것이다. 더 심층적인 통찰력으로 향하는 모든 리팩터링을 거쳐 우리는 도메인 지식과 우선순위의 일부 중요한 측면을 추상화한다."]}
 {:source "프로젝트가 서쪽으로 간 까닭은"
  :quotes ["패턴은 시간이 흐르면서 흡수되고 다듬어져서, 마음 속 깊이 비언어적인 이미지로 저장되었다가, 예감이라는 형태로 표출된다."
           "아드레날린 중독증에 걸린 조직은 계획보다 전력질주가 최선의 방법이라 믿는다. 이런 문화는 필사적인 급박함을 효율적인 생산성이라 믿는다."
           "무엇이 문제입니까? 해결하려면 무엇이 필요합니까? 누가 각각을 책임지고 이끕니까? 첫 번째로 할 일은 무엇입니까? 누가 합니까? 언제까지 합니까? 기간을 모른다면 누가 언제까지 범위를 조사합니까? 언제 다시 모여서 다음 단계를 계획합니까? 회의 끝!"
           "도구 '사용' 비용은 도구 '구입' 비용보다 훨씬 더 비싸다. - 도로시 그라함"
           "끝없이 반대할 권리를 주는 바람에 어느 결정도 최종 결정으로 간주하지 못한다."
           "고객은 직접 보기 전까지 자신이 원하는 바를 알지 못한다. 보고 나서야 아니라고 말한다."
           "프로젝트 초반에 보이는 꾸준한 야근은 팀원들이 공포에 빠졌다는 증거일지 모른다."
           "사람들이 계급장을 떼고 친선을 도모할 때마다 조직은 좀더 건강해진다."
           "정보 과잉은 주의 결핍을 초래한다. - H.A. 사이몬"
           "습관적으로 권위를 무시하는 팀원이 한 명 정도는 필요하다."
           "건설적인 대처를 강조하는 행동을 조직이 비판이나 벌칙으로 받아들일 가능성은 낮다. 그러므로 앞으로도 사람들이 나쁜 소식을 감추거나 왜곡할 가능성이 줄어든다."
           "남의 문제 뒤에 자신의 문제를 감추는 사람을 때로는 '일정 겁쟁이(schedule chicken)'라고 부른다"
           "두 가지를 한꺼번에 하면 IQ가 절반으로 떨어진다. 진담이다. IQ 40은 정말로 중요한 차이다. - 데닐 다우텐, 뉴욕타임즈"
           "같이 식사하지 않는다고 프로젝트가 반드시 실패하지 않듯이, 같이 식사한다고 프로젝트가 반드시 성공하지도 않는다. 하지만 지금까지 우리가 관찰한 바에 따르면 성공한 팀 중 많은 수가 함께 음식을 만들고 먹는 과정에서 생기는 유대감을 최대한 활용했다."
           "진실을 말한다면 아무것도 기억할 필요가 없다 - 마크 트웨인"
           "우리는 잘 안다. 우리는 모든 것을 알지 못하며, 모든 것을 안 적도 없다는 사실을."
           "누군가 '잘 모르겠습니다.'라고 대답하면 신뢰의 표출로 여기기 바란다. 사람들이 안심하고 '잘 모르겠습니다.'라고 말한다면 서로에게 도움을 청해도 괜찮다고 여기기 때문이다."
           "팀원들이 설익은 아이디어를 내놓기 주저하는 분위기에서는 발전이 더디다. 아니, 때로는 발전이 멈춘다."
           "지휘관이 결정을 내리고 공표할 때까지 하급자는 솔직하고 전문적인 의견을 제시해야 마땅하다. 하지만 지휘관이 일단 결정을 내리면 하급자는 자신의 결정인 양 지지하고 따라야 한다. - 미 해병대, 군사 전략서"]}
 {:source "뉴욕의 프로그래머"
  :quotes ["경험이 부족하거나 담력이 약한 프로그래머는 자신의 코드에서 치명적인 실수가 발견되면 심히 당황하여 정상적인 판단능력을 상실한다. 사태를 수습하기 위해서 힘을 모으는 것이 아니라 다른 사람을 비난하거나 자기를 변호하기 위해서 힘을 낭비한다."
           "실수는 아픈 고통을 안겨주지만 성장하는 사람은 그것을 자신의 일부로 끌어안고 실수와 함께 나아간다. 실수 자체는 비웃을 일이 아니다. 다만 실수와 함께 성장하지 못하는 사람은 웃음거리가 될 만하다."
           "때로는 코드의 주인이 누구인가에 따라서 디버깅의 방향을 달리하는 것이 도움되기 때문이다. 겉으로 드러내놓고 말하진 않아도 한 팀에서 일하는 사람들의 마음속에는 누구를 신뢰할 수 있고 누구를 신뢰할 수 없는지 이미 정해져 있기 마련이다. 이런 속사정 때문에 다소 수상한 냄새를 풍기는 객체라도 신뢰할 수 있는 프로그래머가 작성한 코드면 일단 무혐의 처분을 받고, 그렇게 수상하게 보이지 않아도 신뢰할 수 없는 프로그래머가 손을 댄 코드면 곧바로 구속수사를 받게 된다. 이것을 단순히 편견이라고 말하긴 어렵다. 편견이 아니라 프로그래머의 경험과 직관에 근거하는 판단 일부라고 보아야 하기 때문이다."]}
 {:source "사랑하지 않으면 떠나라"
  :quotes ["가장 못 하는 사람이 되려고 한다는 것, 이것은 실질적으로 자신에 대한 두려움으로부터 자유로워진다는 것이다. 이제는 자신을 무시하지 않게 한다. 사람들은 A급 밴드에 속할 수도 있지만 항상 B급 밴드에 들어간다. 두렵기 때문이다. 자신이 최고가 아니라는 것을 솔직히 인정하면 자신이 최고가 아니라는 사실이 알려지는 데 대한 두려움을 씻어 낼 수 있다. 사즉생의 역설같이 최악이 되려고 할 때 실제로는 최악이 되지 않을 것이다."
           "큰 투자를 하려고 한다. 큰돈을 투자하는 게 아니라, 자신의 시간, 아니 자신의 삶을 투자하는 것이다. 경력이라는 흐름에 그저 부초처럼 떠다니기만 하면서 그 흐름이 가는 대로 자신을 내맡겨 버리는 사람이 많다."
           "소프트웨어 아키텍트란 '코드를 조금만 짜도' 프로젝트 진행을 극적으로 빨라지게 할 수 있는 사람이다. 업무 경계를 넘나드는 것에 대해서 사람들이 그것을 못하게 막는 것은 일반적으로 마음이 내키지 않아서가 아니다. 그것은 능력의 문제다."]}
 {:source "똑바로 일하라 (Rework)"
  :quotes ["사람들은 많은 말을 하지만 다 틀린 말이다. 우리는 그 사실을 결과로 증명해냈다. 그리고 그 사실을 당신에게도 보여주고자 이 책을 썼다."
           "실패에서 뭘 배우는가? 기껏해야 또다시 실패하지 '않는'법을 배울 뿐이다. 그게 전부다. 앞으로 뭘 '해야'할지에 관해서는 여전히 모르는 상태다."
           "당신을 사랑하는 사람이 있으면 당신을 미워하는 사람도 있기 마련이다. 당신의 말에 분개하는 사람이 아무도 없다면 필시 그것은 당신의 소신이 그만큼 강하지 않다는 반증일 것이다. 당신은 분명 따분한 사람일 것이다."
           "제약은 저주의 가면을 쓴 축복이다. 자원이 부족하면 현재 가진 것을 최대한 활용해야 한다. 다시 말해, 낭비가 사라진다. 그리고 제약 속에서 창의적인 아이디어가 나온다."
           "어떤 것을 만들다 보면 부산물이 나오기 마련이다. 단 한가지만 만들어낼 수는 없다. 모든 것에는 부산물이 있다. 관찰력이 예리하고 머리가 영리한 사업가들은 이런 부산물을 찾아 기회를 만들어낸다."
           "시각적으로 우선순위를 짜는 게 가장 좋다. 가장 중요한 일을 목록의 맨 위에 놓아라. 그 일을 마치면 이제 목록의 바로 밑에 있는 일이 가장 중요한 일이 된다."
           "내가 고객의 말을 들었더라면 그들에게 더 빠른 말(馬)을 주었을 것이다. - 헨리 포드"
           "이왕 인력을 고용할 거라면 최고의 작가를 고용하라. 마케팅, 판매, 디자인, 프로그램, 그 어떤 자리에서도 글 쓰는 기술은 빛을 발한다."]}
 {:source "손에 잡히는 Vim"
  :quotes ["항상 과거를 돌아보라. 그러면 뭔가 배울 수 있을 것이다. - 폴 새뮤얼슨"
           "반복은 연구의 어머니다. - 쇼펜하우어, 문장론"]}
 {:source "Git, 분산 버전 관리 시스템"
  :quotes ["최하위 계층에서 Git은 저장소에 저장한 파일을 내용 단위로 추적한다. 이런 점에서 파일을 추적하는 여타 버전 관리 시스템과는 다르다."
           "스테이징 영역은 저장소에 커밋하기 전에 커밋을 준비하는 위치다. ... 스테이징 영역은 원하는 변경 사항을 커밋하기 전에 정교하게 다듬을 수 있는 기회를 제공한다."]}
 {:source "도해사고력"
  :quotes ["항목별 메모는 기록한다는 느낌은 있지만 이해, 기억, 전달이라는 여러 측면에서 문제투성이다."
           "도해가 가장 필요한 순간은 바로 메모할 때이다. 항목별로 메모하면 나중에 다시 그 내용을 곰곰이 떠올리며 비즈니스 모델이나 관계성을 도식화해야 하기 때문이다. 따라서 자신이 이해한 내용을 그 자리에서 그대로 그려야 한다."
           "도해 표현은 이렇게 내용을 예측하고, 듣고, 이해하면서 실시간으로 도식화하는 기술이다."
           "많은 문제를 몇 가지 패턴으로 정리하면 비슷한 문제의 해결법에서 도움을 얻을 수 있다. 그러나 문자만으로 된 정보는 패턴으로 만들 수 없다. 그래서 도해로 표현하는 것이다. 문제의 대상을 간략하게 만들어 패턴을 그리면 다른 패턴과 비교 검토하여 문제점, 힌트와 해결책을 쉽게 발견할 수 있다."
           "메모 기록 방식을 문자에서 도해로 변경하면 간단히 MECE(Mutually Exclusive and Collectively Exhaustive)를 달성할 수 있다. 도해를 그리면 누락과 중복이 명백하게 보이기 때문이다."
           "도해 표현도 마인드 맵과 같은 장점이 있다. 도해 표현의 기본은 등장하는 요소의 관련성을 사각형과 화살표로 연결하는 것이다. 따라서 일단 기록한 도해를 보고 나중에 아이디어를 추가하려면 화살표와 사각형을 추가하면 된다. 하나의 주제에서 거미줄처럼 전개해가는 마인드맵과 비슷한 방식이라고 할 수 있다."
           "나는 작품을 만들어낸다는 마음가짐으로 도해를 그린다. 도식을 제대로 그려내면 성취감에 도취되어 좀 더 뛰어난 비즈니스 도해를 그리고 싶은 충동에 사로잡힌다. 그렇게 되면 고통스러운 회의나 졸음이 밀려오는 세미나라도 즐겁게 집중할 수 있다."
           "프레임워크는 사고의 구조이자 사고방식이다. 머리를 움직일 때 사용하는 편리한 패턴이라고 할 수 있다. 프레임워크를 사용하면 도해의 생산성이 급격히 향상된다."
           "정확한 분석을 위해 여섯 개의 축으로 시점을 달리하며 파악한다. 요소 분해. 절대량 분해. 비율 분해. 변수 분해. 평가축 분해. 시간축 분해."
           "프레임워크는 이른바 '사고의 구조', '사고방식의 방정식'이다. 생각을 틀에 맞추어 정리하여 지적 생산성을 효율적으로 향상시키는 도구라고 할 수 있다."
           "5W2H는 도해의 프레임워크에 대응한다. Why는 논리트리, What과 Who는 3C분석과 비즈니스 모델, Where는 좌표맵, When은 프로세스나 막대그래프차트, How는 플로차트, How much는 그래프로 표현할 수 있다."]}
 {:source "FREE 프리"
  :quotes ["이 새로운 형태의 '공짜'는 원자 경제가 아니라, 비트 경제를 토대로 하고 있다. 무엇인가가 일단 한 번 소프트웨어가 되면, 그 상품의 원가와 가격이 공짜가 되는 것은 디지털 시대의 독특한 특성이다. 그리고 이 새로운 형태의 공짜가 수십억 달러의 경제-즉 역사상 처음으로 기본가격이 0인 경제-를 창출하고 있다."
           "이 모든 형태의 공짜가 결국은 돈의 이동, 즉 이 상품에서 저 상품으로 혹은 이 사람에서 저 사람으로 돈의 이동, 현재와 미래 간의 돈의 이동, 그리고 비금전적 시장과 금전적 시장 간의 돈의 이동의 결과임을 집고 넘어가도록 하자. 경제학자들은 이 모든 것을 '교차보조금'이라고 부른다."
           "교차보조금은 '공짜 점심은 없다'는 주장의 핵심이다. 이것은 이런저런 방식으로 결국에는 음식 값을 치르게 된다는 것을 의미한다."
           "조지워싱턴 대학의 경재학자 닉 스자보는 이러한 깃발을 '심리적 거래비용'이라 불렀다. 이러한 비용은 '사고'의 대가이다. 우리는 조금씩은 게으르기 때문이 생각할 필요가 없으면 생각하지 않는 것을 선호한다. 그러므로 가급적 사고를 요하지 않는 무엇인가를 선택하는 경향이 있다."
           "물질보다 아이디어로 이루어진 제품들이 많을수록 가격은 보다 빨리 떨어질 것이다. 이것이 디지털 세계에 공짜를 초래하고 있는 풍요의 뿌리이다. 오늘날 우리가 '무어의 법칙'이라 간단히 부르는 것이 바로 이것이다."
           "단기적으로는 수요와 공급이 모든 상품의 가격을 결정할 것이다. 그러나 장기적인 가격 트랜드는 기술 그 자체에 의해 결정될 것이다. 상품이 많아질수록 상품은 점점 저렴해질 것이다. 세이의 법칙은 '공급이 수요를 창출한다'고 주장한다."
           "맥스 전략(max strategy)의 논리는 매우 간단하다. 즉 '당신이 무엇을 만들든 그것을 가능한 최대로 공급하라. 다시 말해 배급에 소요되는 한계비용이 0이므로 가능한 많이 공급하는 것이 유리하다'는 얘기다."
           "이것이 바로 공짜 비즈니스 모델이 하는 일이다. 10억 달러 산업을 100만 달러 산업으로 바꾸어놓고 있는 것이다. 하지만 일반적으로 그러한 부는 증발하지 않는다. 다만 측정하기 어려운 방식으로 재분배될 뿐이다."
           "낭비가 좋을 때도 있다 - 풍요를 가장 효과적으로 이용하는 방법은 통제하지 않는 것이다."
           "궁극적으로 누군가 비용을 지불해야 한다. 그러나 과거와 다른 점은 그러한 비용들이 '감춰진' 비용에서 점차 '분산된' 비용으로 변화하고 있다."
           "웹을 떠받치고 있는 것은 주로 관심(트래픽)과 명성(링크)이라는 두 가지 통화이다. 이 두 가지 모두 공짜 콘텐츠와 서비스로부터 막대한 혜택을 입고 있다. 그리고 이러한 두 가지 통화 가운데 어느 하나를 현금화하는 것은 매우 간단한 일이다."]}
 {:source "자연의 패턴"
  :quotes ["음표가 음악이 아니듯, 수학 기호도 그 자체는 수학이 아니다."
           "인간 정신과 문화는 이런 숱한 패턴들을 인식하고, 분류하고, 이용하는 정형화된 사고 체계를 발전시켜 왔다. 우리는 그것을 수학이라는 이름으로 부른다."
           "카오스는 임의적인 것이 아니다. '겉보기로는' 임의적인 움직임인 것 같지만 엄밀한 법칙에 의해 나타난 움직임이다. 카오스는 숨겨진 질서의 한 형태이다."]}
 {:source "Programming Elixir 1.3"
  :quotes ["Programming should be about transforming data."
           "I don't want to hide data. I want to transform it."
           "The benefit will become obvious as you write more code - functions written without explicit control flow tend to be shorter and more focused. They're easier to read, test, and reuse."
           "You use exceptions far less in Elixir than in other languages - the design philosophy is that errors should propagate back up to an external, supervising process."
           "each process can contain its own state - in a way, processes in Elixir are like objects in an object-oriented system"
           "OTP stands for the Open Telecom Platform, but the full name is largely of historical interest and everyone just says OTP. It was initially used to build telephone exchanges and switches."
           "Erlang can actually run two versions of a module at the same time. Currently executing code will continue to use the old version until that code explicitly cites the name of the module that has changed. At that point, and for that particular process, execution will swap to the new version."
           "However, type specifications are not currently in wide use in the Elixir world. Whether you use them is a matter of personal taste."]}
 {:source "Programming Phoenix 1.4"
  :quotes ["Phoenix is an opinionated framework that favors convention over configuration. But rather than hiding complexity, it layers complexity, providing details piece by piece."
           "Thanks to the Erlang VM, Elixir provides I/O concurrency without callbacks, with user-space multi-core concurrency. In a nutshell, this means Elixir developers write code in the simplest and most straight-forward fashion and the virtual machine takes care of using all of the resources, both CPU and I/O, for you."
           "You can think of any web server as a function. Each time you type a URL, think of it as a function call to some remote server. That function takes your request and generates some response. As we will see, a web server is a natural problem for a functional language to solve."
           "When you think about it, typical web applications are just big functions. Each web request is a function call taking a single formatted string—the URL—as an argument. That function returns a response that's nothing more than a formatted string."
           "Most frameworks have hidden functions that are only exposed to those with deep, intimate internal knowledge. The Phoenix experience is different because it encourages breaking big functions down into smaller ones. Then, it provides a place to explicitly register each smaller function in a way that's easy to understand and replace. We'll tie all of these functions together with the Plug library."
           "Plugs are functions. Your web applications are pipelines of plugs."
           "One size does not fit all when it comes to update strategies. Validations, error reporting, security, and the like can change. When they do, if your single update policy is tightly coupled to a schema, it'll hurt. The changeset lets Ecto decouple update policy from the schema, and that's a good thing because you can handle each update policy in its own separate changeset function."
           "The way the sandbox operates is quite efficient too: instead of deleting all of the data once the suite finishes, which would be expensive, it just wraps each test in a transaction. Once the test is done, the transaction is rolled back and everything behaves as if the data was never there."
           "The | >, or pipe operator, takes the value on the left and passes it as the first argument to the function on the right. We call these compositions pipes or pipelines, and we call each individual function a segment or pipe segment."
           "In Phoenix, we like to encapsulate all business logic in simple modules called contexts."
           "After compilation, templates are functions. Since Phoenix builds templates using linked lists rather than string concatenation the way many imperative languages do, one of the traditional bottlenecks of many web frameworks goes away. Phoenix doesn't have to make huge copies of giant strings."]}
 {:source "빅데이터가 만드는 세상"
  :quotes ["빅 데이터란 큰 규모를 활용해 더 작은 규모에서는 불가능했던 새로운 통찰이나 새로운 형태의 가치를 추출해내는 일이다."
           "빅 데이터 시대는 우리가 사는 방식, 세상과 소통하는 방식에 도전한다. 그중에서도 가장 두드러진 부분은 사회가 인과성에 대한 그동안의 집착을 일부 포기하고 단순한 상관성에 만족해야 할 것이라는 점이다. 즉 '이유'는 모른 채 '결론'만 알게 되는 것이다."
           "빅 데이터의 핵심은 예측에 있다. 혹자는 빅 데이터를 인공지능이라는 컴퓨터 과학의 분과로 설명하거나 기계 학습이라는 분야의 일부로 설명하지만 이런 식의 설명은 핵심을 오도하는 측면이 있다. 빅 데이터의 핵심은 컴퓨터가 인간처럼 '생각'하도록 '가르치려는'데 있지 않다. 빅 데이터는 엄청난 양의 데이터에 수학을 적용해 확률을 추론하려는 노력이다."
           "그렇다면 이제 직관과 신념, 불확실성에게는 무슨 역할이 남을까? 증거에 반해 행동하고 경험에서 배우는 일은 이제 다시 일어나지 않는 것인가? 지금의 사회와 인간관, 진보는 이성을 기초로 한 것이다. 인과성에서 상관성으로 세상이 바뀌는데 이런 것들의 기반이 송두리째 흔들리지 않고서야 다음으로 넘어갈 수 없을 것이다."
           "이 변화들은 서로 연결되어 있고 또 서로를 강화한다. 그중 첫 번째 변화는 작은 데이터에 만족할 필요 없이 방대한 양의 데이터를 분석할 수 있게 된 것이다. 두 번째 변화는 정밀함을 추구하는 대신 현실 세계에 존재하는 데이터의 들쭉날쭉한 특성을 기꺼이 받아들이게 된 것이다. 세 번째 변화는 찾기 힘든 인과성에 매달리는 대신 상관성을 존중하는 것이다."
           "구글의 인공지능 분야 전문가 피터 노빅과 동료들은 <데이터의 터무니없이 뛰어난 효과성>이라는 논문에 다음과 같이 썼다. '많은 데이터를 가진 간단한 모델이 적은 데이터를 가진 정교한 모델보다 뛰어나다.'"
           "들쭉날쭉함을 참는 대가로 우리는 전통적 방법과 툴로는 불가능했을 규모와 범위에서 엄청나게 가치 있는 서비스를 얻는다. 일부 추산에 따르면 전체 디지털 데이터 중에서 '구조화'되어 있는 것은 단 5퍼센트이다. [.] 데이터의 들쭉날쭉함을 수용하지 않는다면 웹페이지나 영상처럼 구조화되지 않은 나머지 95퍼센트의 데이터는 암흑 지대로 남게 된다."
           "전통적 지혜와는 반대로 그렇게 인과성을 직감해서는 세상에 대해 깊이 있게 이해할 수 없다. 많은 경우 이것은 통찰이라는 환영을 심어주는 인지적 지름길일 뿐 실제로는 우리를 어둠 속에 남겨둔다. 우리가 전체 데이터를 처리할 수 없어서 택했던 지름길이 샘플링이었던 것처럼, 인과성을 자각하는 것도 두뇌가 천천히 힘들여 사고하지 않으려고 택하는 지름길일 뿐이다."
           "이에 비해 상관성과 같은 비인과적 분석은 빠르고 싸게 먹히는 경우가 많다. [.] 수학적, 통계적 방법론이 있고, 관련성이 얼마나 강한지 자신 있게 보여줄 수 있는 디지털 툴도 갖추고 있다. 게다가 상관성은 그 자체로만 유용한 것이 아니라 인과관계 연구를 위한 길을 알려주기도 한다."
           "'이론의 종말'이라는 주장은 물리학이나 화학과 같은 실질적 분야에는 이론이 존재했지만 빅 데이터 분석에는 그 어떤 개념적 모델도 필요치 않다고 암시하는 것 같다. 하지만 이것은 얼토당토않은 얘기다. 빅 데이터 그 자체도 이론 위에 세워져 있다. [.] 통계 이론과 수학 이론을 채용하고 있고 때로는 컴퓨터 과학 이론도 사용한다. [.] 이론은 우리의 방법과 결과, 둘 다를 결정짓는다. 우리가 데이터를 선택하는 방법부터가 그렇다."
           "구글은 이 맞춤법 검사기를 공짜로 얻은 걸로 보인다. 구글은 매일 검색엔진에 입력되는 30억 개의 검색어에 포함된 오자들을 재사용했을 뿐이다."
           "바로 '데이터 잔해(data exhaust)'라는 것이다. 이것은 사람들이 세상에서 활동하고 움직이는 과정에서 부산물로 떨구고 가는 데이터를 말한다. [.] 많은 회사들은 이 데이터 잔해를 수거해서 재사용할 수 있는 방향으로 시스템을 설계한다."
           "데이터 잔해는 기업들에게 엄청난 경쟁 우위가 될 수도 있다. 또한 경쟁자들에 대해 강력한 진입 장벽이 되어줄지도 모른다. [.] 기존의 선두 기업들은 고객과의 상호작용으로부터 수집한 데이터 잔해를 자신의 서비스 안에 통합시켰고 이를 통해 현재의 실적을 내고 있다는 점이 문제다."
           "기술이나 사고방식보다는 데이터 자체가 가장 소중해질 것임을 알려주는 증거는 빅 데이터 업계의 수많은 회사 인수전을 보아도 알 수 있다. [.] 피어캐스트를 약 1억 1,000만 달러에 사가면서 [.] 피어캐스트에 데이터를 공급했던 ITA 소프트웨어를 7억 달러에 인수했다."
           "빅 데이터는 점점 더 세상과 세상 속의 우리 위치에 대해 정확한 예측을 내놓지만, 우리는 이것이 우리의 사생활과 자유에 미칠 영향에 대비한 준비가 되어 있지 않을 수도 있다. 우리의 지각이나 제도는 정보 과다의 세상이 아니라 정보 희소성의 세상에 맞게 구성되어 있기 때문이다."
           "'익명화'라는 기술적 접근법도 효과적이지 못한 경우가 많다. [.] 스몰 데이터의 세상에서는 효과가 있는 방법이다. 하지만 정보의 양이나 다양성이 커진 빅 데이터에서는 재식별이 용이하다."
           "빅 데이터 예측과 그 배후에 있는 알고리즘 및 데이터 집합이 블랙박스가 되어버릴 위험이 있다는 것을 알 수 있다. 책임도, 추적 가능성도, 확신도 없는 블랙박스 말이다. 이런 위험을 막기 위해서는 빅 데이터에 대한 모니터링과 투명성이 필요할 것이다."
           "물론 인과관계는 좋은 것이다. 알 수 있을 때는 말이다. 문제는 인과관계는 찾기 어려운 경우가 많고, 찾았다고 생각했는데 착각인 경우도 자주 있다는 점이다."
           "하지만 발명을 촉발하는 것은 데이터가 말해주지 않는 무엇이다. [.] 왜냐하면 그것은 아직 존재하지 않기 때문이다. 헨리 포드가 빅 데이터 알고리즘에게 고객들이 원하는 게 뭐냐고 물었다면 알고리즘은 '더 빠른 말'이라고 답했을 것이다."
           "우리는 결코 완벽한 정보를 가질 수 없기에 우리가 내놓는 예측은 처음부터 잘못될 가능성을 내포한다. [.] 이것 때문에 빅 데이터가 내놓는 통찰이 무효가 되지는 않으며 그저 빅 데이터의 제자리가 어디인지 알려주는 것뿐이다. [.] 그리고 이것은 우리가 빅 데이터라는 툴을 사용할 때 충분한 겸손과 충분한 인간성을 함께 발휘해야 한다는 뜻이기도 하다."]}
 {:source "창조적으로 이미지를 보는 법"
  :quotes ["문제는 당신이 무엇을 '보느냐(look)'가 아니라, 당신이 무엇을 '인식하느냐(see)'이다."]}
 {:source "Metaprogramming Elixir"
  :quotes ["José Valim, the creator of Elixir, chose to do something very different. He exposed the AST in a form that can be represented by Elixir’s own data structures and gave us a natural syntax to interact with it. [.] Having the AST accessible by normal Elixir code lets you do very powerful things because you can operate at the level typically reserved only for compilers and language designers. [.] Macros are code that writes code. Their purpose in life is to interact with the AST using Elixir’s high-level syntax."
           "Elixir has the concept of macro hygiene. Hygiene means that variables, imports, and aliases that you define in a macro do not leak into the caller’s own definitions."
           "This also highlights an effective approach to macros, where the goal is to generate as little code as possible within the caller’s context. By proxying to an outside function, we keep the code generation as straightforward as possible."]}]
